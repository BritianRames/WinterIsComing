Terminals unused in grammar

   CONTINUE
   STRING_TYPE
   AND
   OR
   NOT
   HEADER_END
   OPEN_CONTEXT_TAG
   CLOSE_CONTEXT_TAG


Rules useless in parser due to conflicts

   50 $@8: %empty

   53 $@10: %empty

   59 $@14: %empty


State 26 conflicts: 1 reduce/reduce
State 106 conflicts: 1 reduce/reduce
State 107 conflicts: 1 reduce/reduce
State 116 conflicts: 3 reduce/reduce


Grammar

    0 $accept: begin $end

    1 $@1: %empty

    2 begin: $@1 root

    3 root: declaration END_OF_INSTRUCTION root
    4     | assignation END_OF_INSTRUCTION root

    5 $@2: %empty

    6 root: $@2 function root
    7     | END_OF_INSTRUCTION root
    8     | print END_OF_INSTRUCTION root
    9     | %empty

   10 declaration: INT_TYPE ID
   11            | INT_TYPE ID SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE

   12 $@3: %empty

   13 $@4: %empty

   14 $@5: %empty

   15 $@6: %empty

   16 function: FUN ID $@3 PARENTESIS_OPEN $@4 params $@5 PARENTESIS_CLOSE $@6 CURLY_BRACKET_OPEN END_OF_INSTRUCTION codeSet CURLY_BRACKET_CLOSE END_OF_INSTRUCTION

   17 params: INT_TYPE ID params
   18       | COMMA INT_TYPE ID params
   19       | %empty

   20 codeSet: instruction END_OF_INSTRUCTION codeSet
   21        | controlStructure END_OF_INSTRUCTION codeSet
   22        | END_OF_INSTRUCTION codeSet
   23        | %empty

   24 instruction: assignation
   25            | declaration
   26            | return
   27            | print
   28            | BREAK

   29 assignation: ID ASSIGN INT_VAL
   30            | ID PLUSPLUS
   31            | ID MINUSMINUS
   32            | ID ASSIGN aritmeticOperation
   33            | ID SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE ASSIGN ID
   34            | ID SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE ASSIGN INT_VAL
   35            | ID ASSIGN ID SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE

   36 functionCallParams: INT_VAL
   37                   | ID
   38                   | INT_VAL COMMA functionCallParams
   39                   | ID COMMA functionCallParams
   40                   | %empty

   41 aritmeticOperation: aritmeticOperation SUM aritmeticOperation
   42                   | aritmeticOperation SUBSTRACT aritmeticOperation
   43                   | aritmeticOperation PRODUCT aritmeticOperation
   44                   | aritmeticOperation DIVIDE aritmeticOperation
   45                   | PARENTESIS_OPEN aritmeticOperation PARENTESIS_CLOSE

   46 $@7: %empty

   47 aritmeticOperation: ID PARENTESIS_OPEN $@7 functionCallParams PARENTESIS_CLOSE
   48                   | INT_VAL
   49                   | ID

   50 $@8: %empty

   51 $@9: %empty

   52 return: RETURN ID $@8 $@9

   53 $@10: %empty

   54 $@11: %empty

   55 return: RETURN INT_VAL $@10 $@11

   56 $@12: %empty

   57 $@13: %empty

   58 return: RETURN aritmeticOperation $@12 $@13

   59 $@14: %empty

   60 return: RETURN ID PARENTESIS_OPEN $@14 functionCallParams PARENTESIS_CLOSE

   61 print: PRINT PARENTESIS_OPEN printableElement PARENTESIS_CLOSE

   62 printableElement: ID
   63                 | QUOTE text QUOTE
   64                 | printableElement SUM printableElement
   65                 | INT_VAL

   66 text: STRING_VAL
   67     | ' '

   68 $@15: %empty

   69 $@16: %empty

   70 $@17: %empty

   71 else: $@15 ELSE_CLAUSE $@16 CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@17 codeSet CURLY_BRACKET_CLOSE
   72     | %empty

   73 $@18: %empty

   74 $@19: %empty

   75 $@20: %empty

   76 controlStructure: IF_CLAUSE PARENTESIS_OPEN logicalOperation PARENTESIS_CLOSE $@18 CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@19 codeSet CURLY_BRACKET_CLOSE $@20 else

   77 $@21: %empty

   78 $@22: %empty

   79 $@23: %empty

   80 $@24: %empty

   81 controlStructure: $@21 WHILE_CLAUSE PARENTESIS_OPEN logicalOperation $@22 PARENTESIS_CLOSE CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@23 codeSet $@24 CURLY_BRACKET_CLOSE

   82 logicalOperation: ID logicalOperator ID
   83                 | ID logicalOperator INT_VAL
   84                 | INT_VAL logicalOperator INT_VAL
   85                 | INT_VAL logicalOperator ID

   86 logicalOperator: EQUALS
   87                | NOT_EQUALS
   88                | LESS
   89                | LESS_EQUALS
   90                | GREATER
   91                | GREATER_EQUALS


Terminals, with rules where they appear

$end (0) 0
' ' (32) 67
error (256)
CONTINUE <number> (258)
BREAK <number> (259) 28
RETURN <number> (260) 52 55 58 60
FUN <number> (261) 16
INT_VAL <number> (262) 11 29 33 34 35 36 38 48 55 65 83 84 85
STRING_VAL <string> (263) 66
INT_TYPE <number> (264) 10 11 17 18
STRING_TYPE <number> (265)
ASSIGN <number> (266) 29 32 33 34 35
SUM <number> (267) 41 64
SUBSTRACT <number> (268) 42
PRODUCT <number> (269) 43
DIVIDE <number> (270) 44
AND <number> (271)
OR <number> (272)
NOT <number> (273)
EQUALS <number> (274) 86
NOT_EQUALS <number> (275) 87
GREATER <number> (276) 90
GREATER_EQUALS <number> (277) 91
LESS <number> (278) 88
LESS_EQUALS <number> (279) 89
IF_CLAUSE <number> (280) 76
WHILE_CLAUSE <number> (281) 81
ELSE_CLAUSE <number> (282) 71
HEADER_END <number> (283)
SQUARE_BRACKET_OPEN <number> (284) 11 33 34 35
SQUARE_BRACKET_CLOSE <number> (285) 11 33 34 35
CURLY_BRACKET_OPEN <number> (286) 16 71 76 81
CURLY_BRACKET_CLOSE <number> (287) 16 71 76 81
COMMA <number> (288) 18 38 39
PARENTESIS_OPEN <number> (289) 16 45 47 60 61 76 81
PARENTESIS_CLOSE <number> (290) 16 45 47 60 61 76 81
END_OF_INSTRUCTION <number> (291) 3 4 7 8 16 20 21 22 71 76 81
OPEN_CONTEXT_TAG <number> (292)
CLOSE_CONTEXT_TAG <number> (293)
QUOTE <number> (294) 63
ID <string> (295) 10 11 16 17 18 29 30 31 32 33 34 35 37 39 47 49 52
    60 62 82 83 85
PRINT <number> (296) 61
PLUSPLUS <number> (297) 30
MINUSMINUS <number> (298) 31


Nonterminals, with rules where they appear

$accept (45)
    on left: 0
begin (46)
    on left: 2, on right: 0
$@1 (47)
    on left: 1, on right: 2
root <number> (48)
    on left: 3 4 6 7 8 9, on right: 2 3 4 6 7 8
$@2 (49)
    on left: 5, on right: 6
declaration <number> (50)
    on left: 10 11, on right: 3 25
function <number> (51)
    on left: 16, on right: 6
$@3 (52)
    on left: 12, on right: 16
$@4 (53)
    on left: 13, on right: 16
$@5 (54)
    on left: 14, on right: 16
$@6 (55)
    on left: 15, on right: 16
params <number> (56)
    on left: 17 18 19, on right: 16 17 18
codeSet <number> (57)
    on left: 20 21 22 23, on right: 16 20 21 22 71 76 81
instruction <number> (58)
    on left: 24 25 26 27 28, on right: 20
assignation <number> (59)
    on left: 29 30 31 32 33 34 35, on right: 4 24
functionCallParams <number> (60)
    on left: 36 37 38 39 40, on right: 38 39 47 60
aritmeticOperation (61)
    on left: 41 42 43 44 45 47 48 49, on right: 32 41 42 43 44 45 58
$@7 (62)
    on left: 46, on right: 47
return <number> (63)
    on left: 52 55 58 60, on right: 26
$@8 (64)
    on left: 50, on right: 52
$@9 (65)
    on left: 51, on right: 52
$@10 (66)
    on left: 53, on right: 55
$@11 (67)
    on left: 54, on right: 55
$@12 (68)
    on left: 56, on right: 58
$@13 (69)
    on left: 57, on right: 58
$@14 (70)
    on left: 59, on right: 60
print <number> (71)
    on left: 61, on right: 8 27
printableElement <number> (72)
    on left: 62 63 64 65, on right: 61 64
text <number> (73)
    on left: 66 67, on right: 63
else (74)
    on left: 71 72, on right: 76
$@15 (75)
    on left: 68, on right: 71
$@16 (76)
    on left: 69, on right: 71
$@17 (77)
    on left: 70, on right: 71
controlStructure <number> (78)
    on left: 76 81, on right: 21
$@18 (79)
    on left: 73, on right: 76
$@19 (80)
    on left: 74, on right: 76
$@20 (81)
    on left: 75, on right: 76
$@21 (82)
    on left: 77, on right: 81
$@22 (83)
    on left: 78, on right: 81
$@23 (84)
    on left: 79, on right: 81
$@24 (85)
    on left: 80, on right: 81
logicalOperation <number> (86)
    on left: 82 83 84 85, on right: 76 81
logicalOperator <number> (87)
    on left: 86 87 88 89 90 91, on right: 82 83 84 85


State 0

    0 $accept: . begin $end

    $default  reduce using rule 1 ($@1)

    begin  go to state 1
    $@1    go to state 2


State 1

    0 $accept: begin . $end

    $end  shift, and go to state 3


State 2

    2 begin: $@1 . root

    INT_TYPE            shift, and go to state 4
    END_OF_INSTRUCTION  shift, and go to state 5
    ID                  shift, and go to state 6
    PRINT               shift, and go to state 7

    $end      reduce using rule 9 (root)
    $default  reduce using rule 5 ($@2)

    root         go to state 8
    $@2          go to state 9
    declaration  go to state 10
    assignation  go to state 11
    print        go to state 12


State 3

    0 $accept: begin $end .

    $default  accept


State 4

   10 declaration: INT_TYPE . ID
   11            | INT_TYPE . ID SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE

    ID  shift, and go to state 13


State 5

    7 root: END_OF_INSTRUCTION . root

    INT_TYPE            shift, and go to state 4
    END_OF_INSTRUCTION  shift, and go to state 5
    ID                  shift, and go to state 6
    PRINT               shift, and go to state 7

    $end      reduce using rule 9 (root)
    $default  reduce using rule 5 ($@2)

    root         go to state 14
    $@2          go to state 9
    declaration  go to state 10
    assignation  go to state 11
    print        go to state 12


State 6

   29 assignation: ID . ASSIGN INT_VAL
   30            | ID . PLUSPLUS
   31            | ID . MINUSMINUS
   32            | ID . ASSIGN aritmeticOperation
   33            | ID . SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE ASSIGN ID
   34            | ID . SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE ASSIGN INT_VAL
   35            | ID . ASSIGN ID SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE

    ASSIGN               shift, and go to state 15
    SQUARE_BRACKET_OPEN  shift, and go to state 16
    PLUSPLUS             shift, and go to state 17
    MINUSMINUS           shift, and go to state 18


State 7

   61 print: PRINT . PARENTESIS_OPEN printableElement PARENTESIS_CLOSE

    PARENTESIS_OPEN  shift, and go to state 19


State 8

    2 begin: $@1 root .

    $default  reduce using rule 2 (begin)


State 9

    6 root: $@2 . function root

    FUN  shift, and go to state 20

    function  go to state 21


State 10

    3 root: declaration . END_OF_INSTRUCTION root

    END_OF_INSTRUCTION  shift, and go to state 22


State 11

    4 root: assignation . END_OF_INSTRUCTION root

    END_OF_INSTRUCTION  shift, and go to state 23


State 12

    8 root: print . END_OF_INSTRUCTION root

    END_OF_INSTRUCTION  shift, and go to state 24


State 13

   10 declaration: INT_TYPE ID .
   11            | INT_TYPE ID . SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE

    SQUARE_BRACKET_OPEN  shift, and go to state 25

    $default  reduce using rule 10 (declaration)


State 14

    7 root: END_OF_INSTRUCTION root .

    $default  reduce using rule 7 (root)


State 15

   29 assignation: ID ASSIGN . INT_VAL
   32            | ID ASSIGN . aritmeticOperation
   35            | ID ASSIGN . ID SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE

    INT_VAL          shift, and go to state 26
    PARENTESIS_OPEN  shift, and go to state 27
    ID               shift, and go to state 28

    aritmeticOperation  go to state 29


State 16

   33 assignation: ID SQUARE_BRACKET_OPEN . INT_VAL SQUARE_BRACKET_CLOSE ASSIGN ID
   34            | ID SQUARE_BRACKET_OPEN . INT_VAL SQUARE_BRACKET_CLOSE ASSIGN INT_VAL

    INT_VAL  shift, and go to state 30


State 17

   30 assignation: ID PLUSPLUS .

    $default  reduce using rule 30 (assignation)


State 18

   31 assignation: ID MINUSMINUS .

    $default  reduce using rule 31 (assignation)


State 19

   61 print: PRINT PARENTESIS_OPEN . printableElement PARENTESIS_CLOSE

    INT_VAL  shift, and go to state 31
    QUOTE    shift, and go to state 32
    ID       shift, and go to state 33

    printableElement  go to state 34


State 20

   16 function: FUN . ID $@3 PARENTESIS_OPEN $@4 params $@5 PARENTESIS_CLOSE $@6 CURLY_BRACKET_OPEN END_OF_INSTRUCTION codeSet CURLY_BRACKET_CLOSE END_OF_INSTRUCTION

    ID  shift, and go to state 35


State 21

    6 root: $@2 function . root

    INT_TYPE            shift, and go to state 4
    END_OF_INSTRUCTION  shift, and go to state 5
    ID                  shift, and go to state 6
    PRINT               shift, and go to state 7

    $end      reduce using rule 9 (root)
    $default  reduce using rule 5 ($@2)

    root         go to state 36
    $@2          go to state 9
    declaration  go to state 10
    assignation  go to state 11
    print        go to state 12


State 22

    3 root: declaration END_OF_INSTRUCTION . root

    INT_TYPE            shift, and go to state 4
    END_OF_INSTRUCTION  shift, and go to state 5
    ID                  shift, and go to state 6
    PRINT               shift, and go to state 7

    $end      reduce using rule 9 (root)
    $default  reduce using rule 5 ($@2)

    root         go to state 37
    $@2          go to state 9
    declaration  go to state 10
    assignation  go to state 11
    print        go to state 12


State 23

    4 root: assignation END_OF_INSTRUCTION . root

    INT_TYPE            shift, and go to state 4
    END_OF_INSTRUCTION  shift, and go to state 5
    ID                  shift, and go to state 6
    PRINT               shift, and go to state 7

    $end      reduce using rule 9 (root)
    $default  reduce using rule 5 ($@2)

    root         go to state 38
    $@2          go to state 9
    declaration  go to state 10
    assignation  go to state 11
    print        go to state 12


State 24

    8 root: print END_OF_INSTRUCTION . root

    INT_TYPE            shift, and go to state 4
    END_OF_INSTRUCTION  shift, and go to state 5
    ID                  shift, and go to state 6
    PRINT               shift, and go to state 7

    $end      reduce using rule 9 (root)
    $default  reduce using rule 5 ($@2)

    root         go to state 39
    $@2          go to state 9
    declaration  go to state 10
    assignation  go to state 11
    print        go to state 12


State 25

   11 declaration: INT_TYPE ID SQUARE_BRACKET_OPEN . INT_VAL SQUARE_BRACKET_CLOSE

    INT_VAL  shift, and go to state 40


State 26

   29 assignation: ID ASSIGN INT_VAL .
   48 aritmeticOperation: INT_VAL .

    END_OF_INSTRUCTION  reduce using rule 29 (assignation)
    END_OF_INSTRUCTION  [reduce using rule 48 (aritmeticOperation)]
    $default            reduce using rule 48 (aritmeticOperation)


State 27

   45 aritmeticOperation: PARENTESIS_OPEN . aritmeticOperation PARENTESIS_CLOSE

    INT_VAL          shift, and go to state 41
    PARENTESIS_OPEN  shift, and go to state 27
    ID               shift, and go to state 42

    aritmeticOperation  go to state 43


State 28

   35 assignation: ID ASSIGN ID . SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE
   47 aritmeticOperation: ID . PARENTESIS_OPEN $@7 functionCallParams PARENTESIS_CLOSE
   49                   | ID .

    SQUARE_BRACKET_OPEN  shift, and go to state 44
    PARENTESIS_OPEN      shift, and go to state 45

    $default  reduce using rule 49 (aritmeticOperation)


State 29

   32 assignation: ID ASSIGN aritmeticOperation .
   41 aritmeticOperation: aritmeticOperation . SUM aritmeticOperation
   42                   | aritmeticOperation . SUBSTRACT aritmeticOperation
   43                   | aritmeticOperation . PRODUCT aritmeticOperation
   44                   | aritmeticOperation . DIVIDE aritmeticOperation

    SUM        shift, and go to state 46
    SUBSTRACT  shift, and go to state 47
    PRODUCT    shift, and go to state 48
    DIVIDE     shift, and go to state 49

    $default  reduce using rule 32 (assignation)


State 30

   33 assignation: ID SQUARE_BRACKET_OPEN INT_VAL . SQUARE_BRACKET_CLOSE ASSIGN ID
   34            | ID SQUARE_BRACKET_OPEN INT_VAL . SQUARE_BRACKET_CLOSE ASSIGN INT_VAL

    SQUARE_BRACKET_CLOSE  shift, and go to state 50


State 31

   65 printableElement: INT_VAL .

    $default  reduce using rule 65 (printableElement)


State 32

   63 printableElement: QUOTE . text QUOTE

    STRING_VAL  shift, and go to state 51
    ' '         shift, and go to state 52

    text  go to state 53


State 33

   62 printableElement: ID .

    $default  reduce using rule 62 (printableElement)


State 34

   61 print: PRINT PARENTESIS_OPEN printableElement . PARENTESIS_CLOSE
   64 printableElement: printableElement . SUM printableElement

    SUM               shift, and go to state 54
    PARENTESIS_CLOSE  shift, and go to state 55


State 35

   16 function: FUN ID . $@3 PARENTESIS_OPEN $@4 params $@5 PARENTESIS_CLOSE $@6 CURLY_BRACKET_OPEN END_OF_INSTRUCTION codeSet CURLY_BRACKET_CLOSE END_OF_INSTRUCTION

    $default  reduce using rule 12 ($@3)

    $@3  go to state 56


State 36

    6 root: $@2 function root .

    $default  reduce using rule 6 (root)


State 37

    3 root: declaration END_OF_INSTRUCTION root .

    $default  reduce using rule 3 (root)


State 38

    4 root: assignation END_OF_INSTRUCTION root .

    $default  reduce using rule 4 (root)


State 39

    8 root: print END_OF_INSTRUCTION root .

    $default  reduce using rule 8 (root)


State 40

   11 declaration: INT_TYPE ID SQUARE_BRACKET_OPEN INT_VAL . SQUARE_BRACKET_CLOSE

    SQUARE_BRACKET_CLOSE  shift, and go to state 57


State 41

   48 aritmeticOperation: INT_VAL .

    $default  reduce using rule 48 (aritmeticOperation)


State 42

   47 aritmeticOperation: ID . PARENTESIS_OPEN $@7 functionCallParams PARENTESIS_CLOSE
   49                   | ID .

    PARENTESIS_OPEN  shift, and go to state 45

    $default  reduce using rule 49 (aritmeticOperation)


State 43

   41 aritmeticOperation: aritmeticOperation . SUM aritmeticOperation
   42                   | aritmeticOperation . SUBSTRACT aritmeticOperation
   43                   | aritmeticOperation . PRODUCT aritmeticOperation
   44                   | aritmeticOperation . DIVIDE aritmeticOperation
   45                   | PARENTESIS_OPEN aritmeticOperation . PARENTESIS_CLOSE

    SUM               shift, and go to state 46
    SUBSTRACT         shift, and go to state 47
    PRODUCT           shift, and go to state 48
    DIVIDE            shift, and go to state 49
    PARENTESIS_CLOSE  shift, and go to state 58


State 44

   35 assignation: ID ASSIGN ID SQUARE_BRACKET_OPEN . INT_VAL SQUARE_BRACKET_CLOSE

    INT_VAL  shift, and go to state 59


State 45

   47 aritmeticOperation: ID PARENTESIS_OPEN . $@7 functionCallParams PARENTESIS_CLOSE

    $default  reduce using rule 46 ($@7)

    $@7  go to state 60


State 46

   41 aritmeticOperation: aritmeticOperation SUM . aritmeticOperation

    INT_VAL          shift, and go to state 41
    PARENTESIS_OPEN  shift, and go to state 27
    ID               shift, and go to state 42

    aritmeticOperation  go to state 61


State 47

   42 aritmeticOperation: aritmeticOperation SUBSTRACT . aritmeticOperation

    INT_VAL          shift, and go to state 41
    PARENTESIS_OPEN  shift, and go to state 27
    ID               shift, and go to state 42

    aritmeticOperation  go to state 62


State 48

   43 aritmeticOperation: aritmeticOperation PRODUCT . aritmeticOperation

    INT_VAL          shift, and go to state 41
    PARENTESIS_OPEN  shift, and go to state 27
    ID               shift, and go to state 42

    aritmeticOperation  go to state 63


State 49

   44 aritmeticOperation: aritmeticOperation DIVIDE . aritmeticOperation

    INT_VAL          shift, and go to state 41
    PARENTESIS_OPEN  shift, and go to state 27
    ID               shift, and go to state 42

    aritmeticOperation  go to state 64


State 50

   33 assignation: ID SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE . ASSIGN ID
   34            | ID SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE . ASSIGN INT_VAL

    ASSIGN  shift, and go to state 65


State 51

   66 text: STRING_VAL .

    $default  reduce using rule 66 (text)


State 52

   67 text: ' ' .

    $default  reduce using rule 67 (text)


State 53

   63 printableElement: QUOTE text . QUOTE

    QUOTE  shift, and go to state 66


State 54

   64 printableElement: printableElement SUM . printableElement

    INT_VAL  shift, and go to state 31
    QUOTE    shift, and go to state 32
    ID       shift, and go to state 33

    printableElement  go to state 67


State 55

   61 print: PRINT PARENTESIS_OPEN printableElement PARENTESIS_CLOSE .

    $default  reduce using rule 61 (print)


State 56

   16 function: FUN ID $@3 . PARENTESIS_OPEN $@4 params $@5 PARENTESIS_CLOSE $@6 CURLY_BRACKET_OPEN END_OF_INSTRUCTION codeSet CURLY_BRACKET_CLOSE END_OF_INSTRUCTION

    PARENTESIS_OPEN  shift, and go to state 68


State 57

   11 declaration: INT_TYPE ID SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE .

    $default  reduce using rule 11 (declaration)


State 58

   45 aritmeticOperation: PARENTESIS_OPEN aritmeticOperation PARENTESIS_CLOSE .

    $default  reduce using rule 45 (aritmeticOperation)


State 59

   35 assignation: ID ASSIGN ID SQUARE_BRACKET_OPEN INT_VAL . SQUARE_BRACKET_CLOSE

    SQUARE_BRACKET_CLOSE  shift, and go to state 69


State 60

   47 aritmeticOperation: ID PARENTESIS_OPEN $@7 . functionCallParams PARENTESIS_CLOSE

    INT_VAL  shift, and go to state 70
    ID       shift, and go to state 71

    $default  reduce using rule 40 (functionCallParams)

    functionCallParams  go to state 72


State 61

   41 aritmeticOperation: aritmeticOperation . SUM aritmeticOperation
   41                   | aritmeticOperation SUM aritmeticOperation .
   42                   | aritmeticOperation . SUBSTRACT aritmeticOperation
   43                   | aritmeticOperation . PRODUCT aritmeticOperation
   44                   | aritmeticOperation . DIVIDE aritmeticOperation

    PRODUCT  shift, and go to state 48
    DIVIDE   shift, and go to state 49

    $default  reduce using rule 41 (aritmeticOperation)


State 62

   41 aritmeticOperation: aritmeticOperation . SUM aritmeticOperation
   42                   | aritmeticOperation . SUBSTRACT aritmeticOperation
   42                   | aritmeticOperation SUBSTRACT aritmeticOperation .
   43                   | aritmeticOperation . PRODUCT aritmeticOperation
   44                   | aritmeticOperation . DIVIDE aritmeticOperation

    PRODUCT  shift, and go to state 48
    DIVIDE   shift, and go to state 49

    $default  reduce using rule 42 (aritmeticOperation)


State 63

   41 aritmeticOperation: aritmeticOperation . SUM aritmeticOperation
   42                   | aritmeticOperation . SUBSTRACT aritmeticOperation
   43                   | aritmeticOperation . PRODUCT aritmeticOperation
   43                   | aritmeticOperation PRODUCT aritmeticOperation .
   44                   | aritmeticOperation . DIVIDE aritmeticOperation

    $default  reduce using rule 43 (aritmeticOperation)


State 64

   41 aritmeticOperation: aritmeticOperation . SUM aritmeticOperation
   42                   | aritmeticOperation . SUBSTRACT aritmeticOperation
   43                   | aritmeticOperation . PRODUCT aritmeticOperation
   44                   | aritmeticOperation . DIVIDE aritmeticOperation
   44                   | aritmeticOperation DIVIDE aritmeticOperation .

    $default  reduce using rule 44 (aritmeticOperation)


State 65

   33 assignation: ID SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE ASSIGN . ID
   34            | ID SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE ASSIGN . INT_VAL

    INT_VAL  shift, and go to state 73
    ID       shift, and go to state 74


State 66

   63 printableElement: QUOTE text QUOTE .

    $default  reduce using rule 63 (printableElement)


State 67

   64 printableElement: printableElement . SUM printableElement
   64                 | printableElement SUM printableElement .

    $default  reduce using rule 64 (printableElement)


State 68

   16 function: FUN ID $@3 PARENTESIS_OPEN . $@4 params $@5 PARENTESIS_CLOSE $@6 CURLY_BRACKET_OPEN END_OF_INSTRUCTION codeSet CURLY_BRACKET_CLOSE END_OF_INSTRUCTION

    $default  reduce using rule 13 ($@4)

    $@4  go to state 75


State 69

   35 assignation: ID ASSIGN ID SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE .

    $default  reduce using rule 35 (assignation)


State 70

   36 functionCallParams: INT_VAL .
   38                   | INT_VAL . COMMA functionCallParams

    COMMA  shift, and go to state 76

    $default  reduce using rule 36 (functionCallParams)


State 71

   37 functionCallParams: ID .
   39                   | ID . COMMA functionCallParams

    COMMA  shift, and go to state 77

    $default  reduce using rule 37 (functionCallParams)


State 72

   47 aritmeticOperation: ID PARENTESIS_OPEN $@7 functionCallParams . PARENTESIS_CLOSE

    PARENTESIS_CLOSE  shift, and go to state 78


State 73

   34 assignation: ID SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE ASSIGN INT_VAL .

    $default  reduce using rule 34 (assignation)


State 74

   33 assignation: ID SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE ASSIGN ID .

    $default  reduce using rule 33 (assignation)


State 75

   16 function: FUN ID $@3 PARENTESIS_OPEN $@4 . params $@5 PARENTESIS_CLOSE $@6 CURLY_BRACKET_OPEN END_OF_INSTRUCTION codeSet CURLY_BRACKET_CLOSE END_OF_INSTRUCTION

    INT_TYPE  shift, and go to state 79
    COMMA     shift, and go to state 80

    $default  reduce using rule 19 (params)

    params  go to state 81


State 76

   38 functionCallParams: INT_VAL COMMA . functionCallParams

    INT_VAL  shift, and go to state 70
    ID       shift, and go to state 71

    $default  reduce using rule 40 (functionCallParams)

    functionCallParams  go to state 82


State 77

   39 functionCallParams: ID COMMA . functionCallParams

    INT_VAL  shift, and go to state 70
    ID       shift, and go to state 71

    $default  reduce using rule 40 (functionCallParams)

    functionCallParams  go to state 83


State 78

   47 aritmeticOperation: ID PARENTESIS_OPEN $@7 functionCallParams PARENTESIS_CLOSE .

    $default  reduce using rule 47 (aritmeticOperation)


State 79

   17 params: INT_TYPE . ID params

    ID  shift, and go to state 84


State 80

   18 params: COMMA . INT_TYPE ID params

    INT_TYPE  shift, and go to state 85


State 81

   16 function: FUN ID $@3 PARENTESIS_OPEN $@4 params . $@5 PARENTESIS_CLOSE $@6 CURLY_BRACKET_OPEN END_OF_INSTRUCTION codeSet CURLY_BRACKET_CLOSE END_OF_INSTRUCTION

    $default  reduce using rule 14 ($@5)

    $@5  go to state 86


State 82

   38 functionCallParams: INT_VAL COMMA functionCallParams .

    $default  reduce using rule 38 (functionCallParams)


State 83

   39 functionCallParams: ID COMMA functionCallParams .

    $default  reduce using rule 39 (functionCallParams)


State 84

   17 params: INT_TYPE ID . params

    INT_TYPE  shift, and go to state 79
    COMMA     shift, and go to state 80

    $default  reduce using rule 19 (params)

    params  go to state 87


State 85

   18 params: COMMA INT_TYPE . ID params

    ID  shift, and go to state 88


State 86

   16 function: FUN ID $@3 PARENTESIS_OPEN $@4 params $@5 . PARENTESIS_CLOSE $@6 CURLY_BRACKET_OPEN END_OF_INSTRUCTION codeSet CURLY_BRACKET_CLOSE END_OF_INSTRUCTION

    PARENTESIS_CLOSE  shift, and go to state 89


State 87

   17 params: INT_TYPE ID params .

    $default  reduce using rule 17 (params)


State 88

   18 params: COMMA INT_TYPE ID . params

    INT_TYPE  shift, and go to state 79
    COMMA     shift, and go to state 80

    $default  reduce using rule 19 (params)

    params  go to state 90


State 89

   16 function: FUN ID $@3 PARENTESIS_OPEN $@4 params $@5 PARENTESIS_CLOSE . $@6 CURLY_BRACKET_OPEN END_OF_INSTRUCTION codeSet CURLY_BRACKET_CLOSE END_OF_INSTRUCTION

    $default  reduce using rule 15 ($@6)

    $@6  go to state 91


State 90

   18 params: COMMA INT_TYPE ID params .

    $default  reduce using rule 18 (params)


State 91

   16 function: FUN ID $@3 PARENTESIS_OPEN $@4 params $@5 PARENTESIS_CLOSE $@6 . CURLY_BRACKET_OPEN END_OF_INSTRUCTION codeSet CURLY_BRACKET_CLOSE END_OF_INSTRUCTION

    CURLY_BRACKET_OPEN  shift, and go to state 92


State 92

   16 function: FUN ID $@3 PARENTESIS_OPEN $@4 params $@5 PARENTESIS_CLOSE $@6 CURLY_BRACKET_OPEN . END_OF_INSTRUCTION codeSet CURLY_BRACKET_CLOSE END_OF_INSTRUCTION

    END_OF_INSTRUCTION  shift, and go to state 93


State 93

   16 function: FUN ID $@3 PARENTESIS_OPEN $@4 params $@5 PARENTESIS_CLOSE $@6 CURLY_BRACKET_OPEN END_OF_INSTRUCTION . codeSet CURLY_BRACKET_CLOSE END_OF_INSTRUCTION

    BREAK               shift, and go to state 94
    RETURN              shift, and go to state 95
    INT_TYPE            shift, and go to state 4
    IF_CLAUSE           shift, and go to state 96
    END_OF_INSTRUCTION  shift, and go to state 97
    ID                  shift, and go to state 6
    PRINT               shift, and go to state 7

    WHILE_CLAUSE  reduce using rule 77 ($@21)
    $default      reduce using rule 23 (codeSet)

    declaration       go to state 98
    codeSet           go to state 99
    instruction       go to state 100
    assignation       go to state 101
    return            go to state 102
    print             go to state 103
    controlStructure  go to state 104
    $@21              go to state 105


State 94

   28 instruction: BREAK .

    $default  reduce using rule 28 (instruction)


State 95

   52 return: RETURN . ID $@8 $@9
   55       | RETURN . INT_VAL $@10 $@11
   58       | RETURN . aritmeticOperation $@12 $@13
   60       | RETURN . ID PARENTESIS_OPEN $@14 functionCallParams PARENTESIS_CLOSE

    INT_VAL          shift, and go to state 106
    PARENTESIS_OPEN  shift, and go to state 27
    ID               shift, and go to state 107

    aritmeticOperation  go to state 108


State 96

   76 controlStructure: IF_CLAUSE . PARENTESIS_OPEN logicalOperation PARENTESIS_CLOSE $@18 CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@19 codeSet CURLY_BRACKET_CLOSE $@20 else

    PARENTESIS_OPEN  shift, and go to state 109


State 97

   22 codeSet: END_OF_INSTRUCTION . codeSet

    BREAK               shift, and go to state 94
    RETURN              shift, and go to state 95
    INT_TYPE            shift, and go to state 4
    IF_CLAUSE           shift, and go to state 96
    END_OF_INSTRUCTION  shift, and go to state 97
    ID                  shift, and go to state 6
    PRINT               shift, and go to state 7

    WHILE_CLAUSE  reduce using rule 77 ($@21)
    $default      reduce using rule 23 (codeSet)

    declaration       go to state 98
    codeSet           go to state 110
    instruction       go to state 100
    assignation       go to state 101
    return            go to state 102
    print             go to state 103
    controlStructure  go to state 104
    $@21              go to state 105


State 98

   25 instruction: declaration .

    $default  reduce using rule 25 (instruction)


State 99

   16 function: FUN ID $@3 PARENTESIS_OPEN $@4 params $@5 PARENTESIS_CLOSE $@6 CURLY_BRACKET_OPEN END_OF_INSTRUCTION codeSet . CURLY_BRACKET_CLOSE END_OF_INSTRUCTION

    CURLY_BRACKET_CLOSE  shift, and go to state 111


State 100

   20 codeSet: instruction . END_OF_INSTRUCTION codeSet

    END_OF_INSTRUCTION  shift, and go to state 112


State 101

   24 instruction: assignation .

    $default  reduce using rule 24 (instruction)


State 102

   26 instruction: return .

    $default  reduce using rule 26 (instruction)


State 103

   27 instruction: print .

    $default  reduce using rule 27 (instruction)


State 104

   21 codeSet: controlStructure . END_OF_INSTRUCTION codeSet

    END_OF_INSTRUCTION  shift, and go to state 113


State 105

   81 controlStructure: $@21 . WHILE_CLAUSE PARENTESIS_OPEN logicalOperation $@22 PARENTESIS_CLOSE CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@23 codeSet $@24 CURLY_BRACKET_CLOSE

    WHILE_CLAUSE  shift, and go to state 114


State 106

   48 aritmeticOperation: INT_VAL .
   55 return: RETURN INT_VAL . $@10 $@11

    END_OF_INSTRUCTION  reduce using rule 48 (aritmeticOperation)
    END_OF_INSTRUCTION  [reduce using rule 53 ($@10)]
    $default            reduce using rule 48 (aritmeticOperation)

    $@10  go to state 115


State 107

   47 aritmeticOperation: ID . PARENTESIS_OPEN $@7 functionCallParams PARENTESIS_CLOSE
   49                   | ID .
   52 return: RETURN ID . $@8 $@9
   60       | RETURN ID . PARENTESIS_OPEN $@14 functionCallParams PARENTESIS_CLOSE

    PARENTESIS_OPEN  shift, and go to state 116

    END_OF_INSTRUCTION  reduce using rule 49 (aritmeticOperation)
    END_OF_INSTRUCTION  [reduce using rule 50 ($@8)]
    $default            reduce using rule 49 (aritmeticOperation)

    $@8  go to state 117


State 108

   41 aritmeticOperation: aritmeticOperation . SUM aritmeticOperation
   42                   | aritmeticOperation . SUBSTRACT aritmeticOperation
   43                   | aritmeticOperation . PRODUCT aritmeticOperation
   44                   | aritmeticOperation . DIVIDE aritmeticOperation
   58 return: RETURN aritmeticOperation . $@12 $@13

    SUM        shift, and go to state 46
    SUBSTRACT  shift, and go to state 47
    PRODUCT    shift, and go to state 48
    DIVIDE     shift, and go to state 49

    $default  reduce using rule 56 ($@12)

    $@12  go to state 118


State 109

   76 controlStructure: IF_CLAUSE PARENTESIS_OPEN . logicalOperation PARENTESIS_CLOSE $@18 CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@19 codeSet CURLY_BRACKET_CLOSE $@20 else

    INT_VAL  shift, and go to state 119
    ID       shift, and go to state 120

    logicalOperation  go to state 121


State 110

   22 codeSet: END_OF_INSTRUCTION codeSet .

    $default  reduce using rule 22 (codeSet)


State 111

   16 function: FUN ID $@3 PARENTESIS_OPEN $@4 params $@5 PARENTESIS_CLOSE $@6 CURLY_BRACKET_OPEN END_OF_INSTRUCTION codeSet CURLY_BRACKET_CLOSE . END_OF_INSTRUCTION

    END_OF_INSTRUCTION  shift, and go to state 122


State 112

   20 codeSet: instruction END_OF_INSTRUCTION . codeSet

    BREAK               shift, and go to state 94
    RETURN              shift, and go to state 95
    INT_TYPE            shift, and go to state 4
    IF_CLAUSE           shift, and go to state 96
    END_OF_INSTRUCTION  shift, and go to state 97
    ID                  shift, and go to state 6
    PRINT               shift, and go to state 7

    WHILE_CLAUSE  reduce using rule 77 ($@21)
    $default      reduce using rule 23 (codeSet)

    declaration       go to state 98
    codeSet           go to state 123
    instruction       go to state 100
    assignation       go to state 101
    return            go to state 102
    print             go to state 103
    controlStructure  go to state 104
    $@21              go to state 105


State 113

   21 codeSet: controlStructure END_OF_INSTRUCTION . codeSet

    BREAK               shift, and go to state 94
    RETURN              shift, and go to state 95
    INT_TYPE            shift, and go to state 4
    IF_CLAUSE           shift, and go to state 96
    END_OF_INSTRUCTION  shift, and go to state 97
    ID                  shift, and go to state 6
    PRINT               shift, and go to state 7

    WHILE_CLAUSE  reduce using rule 77 ($@21)
    $default      reduce using rule 23 (codeSet)

    declaration       go to state 98
    codeSet           go to state 124
    instruction       go to state 100
    assignation       go to state 101
    return            go to state 102
    print             go to state 103
    controlStructure  go to state 104
    $@21              go to state 105


State 114

   81 controlStructure: $@21 WHILE_CLAUSE . PARENTESIS_OPEN logicalOperation $@22 PARENTESIS_CLOSE CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@23 codeSet $@24 CURLY_BRACKET_CLOSE

    PARENTESIS_OPEN  shift, and go to state 125


State 115

   55 return: RETURN INT_VAL $@10 . $@11

    $default  reduce using rule 54 ($@11)

    $@11  go to state 126


State 116

   47 aritmeticOperation: ID PARENTESIS_OPEN . $@7 functionCallParams PARENTESIS_CLOSE
   60 return: RETURN ID PARENTESIS_OPEN . $@14 functionCallParams PARENTESIS_CLOSE

    INT_VAL           reduce using rule 46 ($@7)
    INT_VAL           [reduce using rule 59 ($@14)]
    PARENTESIS_CLOSE  reduce using rule 46 ($@7)
    PARENTESIS_CLOSE  [reduce using rule 59 ($@14)]
    ID                reduce using rule 46 ($@7)
    ID                [reduce using rule 59 ($@14)]
    $default          reduce using rule 46 ($@7)

    $@7   go to state 60
    $@14  go to state 127


State 117

   52 return: RETURN ID $@8 . $@9

    $default  reduce using rule 51 ($@9)

    $@9  go to state 128


State 118

   58 return: RETURN aritmeticOperation $@12 . $@13

    $default  reduce using rule 57 ($@13)

    $@13  go to state 129


State 119

   84 logicalOperation: INT_VAL . logicalOperator INT_VAL
   85                 | INT_VAL . logicalOperator ID

    EQUALS          shift, and go to state 130
    NOT_EQUALS      shift, and go to state 131
    GREATER         shift, and go to state 132
    GREATER_EQUALS  shift, and go to state 133
    LESS            shift, and go to state 134
    LESS_EQUALS     shift, and go to state 135

    logicalOperator  go to state 136


State 120

   82 logicalOperation: ID . logicalOperator ID
   83                 | ID . logicalOperator INT_VAL

    EQUALS          shift, and go to state 130
    NOT_EQUALS      shift, and go to state 131
    GREATER         shift, and go to state 132
    GREATER_EQUALS  shift, and go to state 133
    LESS            shift, and go to state 134
    LESS_EQUALS     shift, and go to state 135

    logicalOperator  go to state 137


State 121

   76 controlStructure: IF_CLAUSE PARENTESIS_OPEN logicalOperation . PARENTESIS_CLOSE $@18 CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@19 codeSet CURLY_BRACKET_CLOSE $@20 else

    PARENTESIS_CLOSE  shift, and go to state 138


State 122

   16 function: FUN ID $@3 PARENTESIS_OPEN $@4 params $@5 PARENTESIS_CLOSE $@6 CURLY_BRACKET_OPEN END_OF_INSTRUCTION codeSet CURLY_BRACKET_CLOSE END_OF_INSTRUCTION .

    $default  reduce using rule 16 (function)


State 123

   20 codeSet: instruction END_OF_INSTRUCTION codeSet .

    $default  reduce using rule 20 (codeSet)


State 124

   21 codeSet: controlStructure END_OF_INSTRUCTION codeSet .

    $default  reduce using rule 21 (codeSet)


State 125

   81 controlStructure: $@21 WHILE_CLAUSE PARENTESIS_OPEN . logicalOperation $@22 PARENTESIS_CLOSE CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@23 codeSet $@24 CURLY_BRACKET_CLOSE

    INT_VAL  shift, and go to state 119
    ID       shift, and go to state 120

    logicalOperation  go to state 139


State 126

   55 return: RETURN INT_VAL $@10 $@11 .

    $default  reduce using rule 55 (return)


State 127

   60 return: RETURN ID PARENTESIS_OPEN $@14 . functionCallParams PARENTESIS_CLOSE

    INT_VAL  shift, and go to state 70
    ID       shift, and go to state 71

    $default  reduce using rule 40 (functionCallParams)

    functionCallParams  go to state 140


State 128

   52 return: RETURN ID $@8 $@9 .

    $default  reduce using rule 52 (return)


State 129

   58 return: RETURN aritmeticOperation $@12 $@13 .

    $default  reduce using rule 58 (return)


State 130

   86 logicalOperator: EQUALS .

    $default  reduce using rule 86 (logicalOperator)


State 131

   87 logicalOperator: NOT_EQUALS .

    $default  reduce using rule 87 (logicalOperator)


State 132

   90 logicalOperator: GREATER .

    $default  reduce using rule 90 (logicalOperator)


State 133

   91 logicalOperator: GREATER_EQUALS .

    $default  reduce using rule 91 (logicalOperator)


State 134

   88 logicalOperator: LESS .

    $default  reduce using rule 88 (logicalOperator)


State 135

   89 logicalOperator: LESS_EQUALS .

    $default  reduce using rule 89 (logicalOperator)


State 136

   84 logicalOperation: INT_VAL logicalOperator . INT_VAL
   85                 | INT_VAL logicalOperator . ID

    INT_VAL  shift, and go to state 141
    ID       shift, and go to state 142


State 137

   82 logicalOperation: ID logicalOperator . ID
   83                 | ID logicalOperator . INT_VAL

    INT_VAL  shift, and go to state 143
    ID       shift, and go to state 144


State 138

   76 controlStructure: IF_CLAUSE PARENTESIS_OPEN logicalOperation PARENTESIS_CLOSE . $@18 CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@19 codeSet CURLY_BRACKET_CLOSE $@20 else

    $default  reduce using rule 73 ($@18)

    $@18  go to state 145


State 139

   81 controlStructure: $@21 WHILE_CLAUSE PARENTESIS_OPEN logicalOperation . $@22 PARENTESIS_CLOSE CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@23 codeSet $@24 CURLY_BRACKET_CLOSE

    $default  reduce using rule 78 ($@22)

    $@22  go to state 146


State 140

   60 return: RETURN ID PARENTESIS_OPEN $@14 functionCallParams . PARENTESIS_CLOSE

    PARENTESIS_CLOSE  shift, and go to state 147


State 141

   84 logicalOperation: INT_VAL logicalOperator INT_VAL .

    $default  reduce using rule 84 (logicalOperation)


State 142

   85 logicalOperation: INT_VAL logicalOperator ID .

    $default  reduce using rule 85 (logicalOperation)


State 143

   83 logicalOperation: ID logicalOperator INT_VAL .

    $default  reduce using rule 83 (logicalOperation)


State 144

   82 logicalOperation: ID logicalOperator ID .

    $default  reduce using rule 82 (logicalOperation)


State 145

   76 controlStructure: IF_CLAUSE PARENTESIS_OPEN logicalOperation PARENTESIS_CLOSE $@18 . CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@19 codeSet CURLY_BRACKET_CLOSE $@20 else

    CURLY_BRACKET_OPEN  shift, and go to state 148


State 146

   81 controlStructure: $@21 WHILE_CLAUSE PARENTESIS_OPEN logicalOperation $@22 . PARENTESIS_CLOSE CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@23 codeSet $@24 CURLY_BRACKET_CLOSE

    PARENTESIS_CLOSE  shift, and go to state 149


State 147

   60 return: RETURN ID PARENTESIS_OPEN $@14 functionCallParams PARENTESIS_CLOSE .

    $default  reduce using rule 60 (return)


State 148

   76 controlStructure: IF_CLAUSE PARENTESIS_OPEN logicalOperation PARENTESIS_CLOSE $@18 CURLY_BRACKET_OPEN . END_OF_INSTRUCTION $@19 codeSet CURLY_BRACKET_CLOSE $@20 else

    END_OF_INSTRUCTION  shift, and go to state 150


State 149

   81 controlStructure: $@21 WHILE_CLAUSE PARENTESIS_OPEN logicalOperation $@22 PARENTESIS_CLOSE . CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@23 codeSet $@24 CURLY_BRACKET_CLOSE

    CURLY_BRACKET_OPEN  shift, and go to state 151


State 150

   76 controlStructure: IF_CLAUSE PARENTESIS_OPEN logicalOperation PARENTESIS_CLOSE $@18 CURLY_BRACKET_OPEN END_OF_INSTRUCTION . $@19 codeSet CURLY_BRACKET_CLOSE $@20 else

    $default  reduce using rule 74 ($@19)

    $@19  go to state 152


State 151

   81 controlStructure: $@21 WHILE_CLAUSE PARENTESIS_OPEN logicalOperation $@22 PARENTESIS_CLOSE CURLY_BRACKET_OPEN . END_OF_INSTRUCTION $@23 codeSet $@24 CURLY_BRACKET_CLOSE

    END_OF_INSTRUCTION  shift, and go to state 153


State 152

   76 controlStructure: IF_CLAUSE PARENTESIS_OPEN logicalOperation PARENTESIS_CLOSE $@18 CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@19 . codeSet CURLY_BRACKET_CLOSE $@20 else

    BREAK               shift, and go to state 94
    RETURN              shift, and go to state 95
    INT_TYPE            shift, and go to state 4
    IF_CLAUSE           shift, and go to state 96
    END_OF_INSTRUCTION  shift, and go to state 97
    ID                  shift, and go to state 6
    PRINT               shift, and go to state 7

    WHILE_CLAUSE  reduce using rule 77 ($@21)
    $default      reduce using rule 23 (codeSet)

    declaration       go to state 98
    codeSet           go to state 154
    instruction       go to state 100
    assignation       go to state 101
    return            go to state 102
    print             go to state 103
    controlStructure  go to state 104
    $@21              go to state 105


State 153

   81 controlStructure: $@21 WHILE_CLAUSE PARENTESIS_OPEN logicalOperation $@22 PARENTESIS_CLOSE CURLY_BRACKET_OPEN END_OF_INSTRUCTION . $@23 codeSet $@24 CURLY_BRACKET_CLOSE

    $default  reduce using rule 79 ($@23)

    $@23  go to state 155


State 154

   76 controlStructure: IF_CLAUSE PARENTESIS_OPEN logicalOperation PARENTESIS_CLOSE $@18 CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@19 codeSet . CURLY_BRACKET_CLOSE $@20 else

    CURLY_BRACKET_CLOSE  shift, and go to state 156


State 155

   81 controlStructure: $@21 WHILE_CLAUSE PARENTESIS_OPEN logicalOperation $@22 PARENTESIS_CLOSE CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@23 . codeSet $@24 CURLY_BRACKET_CLOSE

    BREAK               shift, and go to state 94
    RETURN              shift, and go to state 95
    INT_TYPE            shift, and go to state 4
    IF_CLAUSE           shift, and go to state 96
    END_OF_INSTRUCTION  shift, and go to state 97
    ID                  shift, and go to state 6
    PRINT               shift, and go to state 7

    WHILE_CLAUSE  reduce using rule 77 ($@21)
    $default      reduce using rule 23 (codeSet)

    declaration       go to state 98
    codeSet           go to state 157
    instruction       go to state 100
    assignation       go to state 101
    return            go to state 102
    print             go to state 103
    controlStructure  go to state 104
    $@21              go to state 105


State 156

   76 controlStructure: IF_CLAUSE PARENTESIS_OPEN logicalOperation PARENTESIS_CLOSE $@18 CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@19 codeSet CURLY_BRACKET_CLOSE . $@20 else

    $default  reduce using rule 75 ($@20)

    $@20  go to state 158


State 157

   81 controlStructure: $@21 WHILE_CLAUSE PARENTESIS_OPEN logicalOperation $@22 PARENTESIS_CLOSE CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@23 codeSet . $@24 CURLY_BRACKET_CLOSE

    $default  reduce using rule 80 ($@24)

    $@24  go to state 159


State 158

   76 controlStructure: IF_CLAUSE PARENTESIS_OPEN logicalOperation PARENTESIS_CLOSE $@18 CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@19 codeSet CURLY_BRACKET_CLOSE $@20 . else

    END_OF_INSTRUCTION  reduce using rule 72 (else)
    $default            reduce using rule 68 ($@15)

    else  go to state 160
    $@15  go to state 161


State 159

   81 controlStructure: $@21 WHILE_CLAUSE PARENTESIS_OPEN logicalOperation $@22 PARENTESIS_CLOSE CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@23 codeSet $@24 . CURLY_BRACKET_CLOSE

    CURLY_BRACKET_CLOSE  shift, and go to state 162


State 160

   76 controlStructure: IF_CLAUSE PARENTESIS_OPEN logicalOperation PARENTESIS_CLOSE $@18 CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@19 codeSet CURLY_BRACKET_CLOSE $@20 else .

    $default  reduce using rule 76 (controlStructure)


State 161

   71 else: $@15 . ELSE_CLAUSE $@16 CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@17 codeSet CURLY_BRACKET_CLOSE

    ELSE_CLAUSE  shift, and go to state 163


State 162

   81 controlStructure: $@21 WHILE_CLAUSE PARENTESIS_OPEN logicalOperation $@22 PARENTESIS_CLOSE CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@23 codeSet $@24 CURLY_BRACKET_CLOSE .

    $default  reduce using rule 81 (controlStructure)


State 163

   71 else: $@15 ELSE_CLAUSE . $@16 CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@17 codeSet CURLY_BRACKET_CLOSE

    $default  reduce using rule 69 ($@16)

    $@16  go to state 164


State 164

   71 else: $@15 ELSE_CLAUSE $@16 . CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@17 codeSet CURLY_BRACKET_CLOSE

    CURLY_BRACKET_OPEN  shift, and go to state 165


State 165

   71 else: $@15 ELSE_CLAUSE $@16 CURLY_BRACKET_OPEN . END_OF_INSTRUCTION $@17 codeSet CURLY_BRACKET_CLOSE

    END_OF_INSTRUCTION  shift, and go to state 166


State 166

   71 else: $@15 ELSE_CLAUSE $@16 CURLY_BRACKET_OPEN END_OF_INSTRUCTION . $@17 codeSet CURLY_BRACKET_CLOSE

    $default  reduce using rule 70 ($@17)

    $@17  go to state 167


State 167

   71 else: $@15 ELSE_CLAUSE $@16 CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@17 . codeSet CURLY_BRACKET_CLOSE

    BREAK               shift, and go to state 94
    RETURN              shift, and go to state 95
    INT_TYPE            shift, and go to state 4
    IF_CLAUSE           shift, and go to state 96
    END_OF_INSTRUCTION  shift, and go to state 97
    ID                  shift, and go to state 6
    PRINT               shift, and go to state 7

    WHILE_CLAUSE  reduce using rule 77 ($@21)
    $default      reduce using rule 23 (codeSet)

    declaration       go to state 98
    codeSet           go to state 168
    instruction       go to state 100
    assignation       go to state 101
    return            go to state 102
    print             go to state 103
    controlStructure  go to state 104
    $@21              go to state 105


State 168

   71 else: $@15 ELSE_CLAUSE $@16 CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@17 codeSet . CURLY_BRACKET_CLOSE

    CURLY_BRACKET_CLOSE  shift, and go to state 169


State 169

   71 else: $@15 ELSE_CLAUSE $@16 CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@17 codeSet CURLY_BRACKET_CLOSE .

    $default  reduce using rule 71 (else)
