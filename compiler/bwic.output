Nonterminals useless in grammar

   printableElement
   text


Terminals unused in grammar

   CONTINUE
   STRING_TYPE
   AND
   OR
   NOT
   HEADER_END
   OPEN_CONTEXT_TAG
   CLOSE_CONTEXT_TAG
   ' '


Rules useless in grammar

   89 printableElement: ID
   90                 | QUOTE text QUOTE
   91                 | printableElement SUM printableElement
   92                 | INT_VAL

   93 text: STRING_VAL
   94     | ' '


Rules useless in parser due to conflicts

   52 $@10: %empty

   55 $@12: %empty

   61 $@16: %empty


State 26 conflicts: 1 reduce/reduce
State 65 conflicts: 1 reduce/reduce
State 105 conflicts: 1 reduce/reduce
State 106 conflicts: 1 reduce/reduce
State 115 conflicts: 4 reduce/reduce


Grammar

    0 $accept: begin $end

    1 $@1: %empty

    2 begin: $@1 root

    3 root: declaration END_OF_INSTRUCTION root
    4     | assignation END_OF_INSTRUCTION root

    5 $@2: %empty

    6 root: $@2 function root
    7     | END_OF_INSTRUCTION root
    8     | print END_OF_INSTRUCTION root
    9     | %empty

   10 declaration: INT_TYPE ID
   11            | INT_TYPE ID SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE

   12 $@3: %empty

   13 $@4: %empty

   14 $@5: %empty

   15 $@6: %empty

   16 function: FUN ID $@3 PARENTESIS_OPEN $@4 params $@5 PARENTESIS_CLOSE $@6 CURLY_BRACKET_OPEN END_OF_INSTRUCTION codeSet CURLY_BRACKET_CLOSE END_OF_INSTRUCTION

   17 $@7: %empty

   18 params: INT_TYPE ID $@7 params
   19       | COMMA INT_TYPE ID params

   20 $@8: %empty

   21 params: INT_TYPE ID SQUARE_BRACKET_OPEN SQUARE_BRACKET_CLOSE $@8 params
   22       | COMMA INT_TYPE ID SQUARE_BRACKET_OPEN SQUARE_BRACKET_CLOSE params
   23       | %empty

   24 codeSet: instruction END_OF_INSTRUCTION codeSet
   25        | controlStructure END_OF_INSTRUCTION codeSet
   26        | END_OF_INSTRUCTION codeSet
   27        | %empty

   28 instruction: assignation
   29            | declaration
   30            | return
   31            | print
   32            | BREAK

   33 assignation: ID ASSIGN INT_VAL
   34            | ID PLUSPLUS
   35            | ID MINUSMINUS
   36            | ID ASSIGN aritmeticOperation
   37            | ID SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE ASSIGN INT_VAL
   38            | ID SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE ASSIGN aritmeticOperation

   39 functionCallParams: aritmeticOperation
   40                   | aritmeticOperation COMMA functionCallParams
   41                   | %empty

   42 aritmeticOperation: aritmeticOperation SUM aritmeticOperation
   43                   | aritmeticOperation SUBSTRACT aritmeticOperation
   44                   | aritmeticOperation PRODUCT aritmeticOperation
   45                   | aritmeticOperation DIVIDE aritmeticOperation
   46                   | PARENTESIS_OPEN aritmeticOperation PARENTESIS_CLOSE

   47 $@9: %empty

   48 aritmeticOperation: ID PARENTESIS_OPEN $@9 functionCallParams PARENTESIS_CLOSE
   49                   | INT_VAL
   50                   | ID
   51                   | ID SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE

   52 $@10: %empty

   53 $@11: %empty

   54 return: RETURN ID $@10 $@11

   55 $@12: %empty

   56 $@13: %empty

   57 return: RETURN INT_VAL $@12 $@13

   58 $@14: %empty

   59 $@15: %empty

   60 return: RETURN aritmeticOperation $@14 $@15

   61 $@16: %empty

   62 return: RETURN ID PARENTESIS_OPEN $@16 functionCallParams PARENTESIS_CLOSE

   63 print: PRINT PARENTESIS_OPEN QUOTE STRING_VAL QUOTE PARENTESIS_CLOSE
   64      | PRINT PARENTESIS_OPEN aritmeticOperation PARENTESIS_CLOSE

   65 $@17: %empty

   66 $@18: %empty

   67 $@19: %empty

   68 else: $@17 ELSE_CLAUSE $@18 CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@19 codeSet CURLY_BRACKET_CLOSE
   69     | %empty

   70 $@20: %empty

   71 $@21: %empty

   72 $@22: %empty

   73 controlStructure: IF_CLAUSE PARENTESIS_OPEN logicalOperation PARENTESIS_CLOSE $@20 CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@21 codeSet CURLY_BRACKET_CLOSE $@22 else

   74 $@23: %empty

   75 $@24: %empty

   76 $@25: %empty

   77 $@26: %empty

   78 controlStructure: $@23 WHILE_CLAUSE PARENTESIS_OPEN logicalOperation $@24 PARENTESIS_CLOSE CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@25 codeSet $@26 CURLY_BRACKET_CLOSE

   79 logicalOperation: ID logicalOperator ID
   80                 | ID logicalOperator INT_VAL
   81                 | INT_VAL logicalOperator INT_VAL
   82                 | INT_VAL logicalOperator ID

   83 logicalOperator: EQUALS
   84                | NOT_EQUALS
   85                | LESS
   86                | LESS_EQUALS
   87                | GREATER
   88                | GREATER_EQUALS


Terminals, with rules where they appear

$end (0) 0
' ' (32)
error (256)
CONTINUE <number> (258)
BREAK <number> (259) 32
RETURN <number> (260) 54 57 60 62
FUN <number> (261) 16
INT_VAL <number> (262) 11 33 37 38 49 51 57 80 81 82
STRING_VAL <string> (263) 63
INT_TYPE <number> (264) 10 11 18 19 21 22
STRING_TYPE <number> (265)
ASSIGN <number> (266) 33 36 37 38
SUM <number> (267) 42
SUBSTRACT <number> (268) 43
PRODUCT <number> (269) 44
DIVIDE <number> (270) 45
AND <number> (271)
OR <number> (272)
NOT <number> (273)
EQUALS <number> (274) 83
NOT_EQUALS <number> (275) 84
GREATER <number> (276) 87
GREATER_EQUALS <number> (277) 88
LESS <number> (278) 85
LESS_EQUALS <number> (279) 86
IF_CLAUSE <number> (280) 73
WHILE_CLAUSE <number> (281) 78
ELSE_CLAUSE <number> (282) 68
HEADER_END <number> (283)
SQUARE_BRACKET_OPEN <number> (284) 11 21 22 37 38 51
SQUARE_BRACKET_CLOSE <number> (285) 11 21 22 37 38 51
CURLY_BRACKET_OPEN <number> (286) 16 68 73 78
CURLY_BRACKET_CLOSE <number> (287) 16 68 73 78
COMMA <number> (288) 19 22 40
PARENTESIS_OPEN <number> (289) 16 46 48 62 63 64 73 78
PARENTESIS_CLOSE <number> (290) 16 46 48 62 63 64 73 78
END_OF_INSTRUCTION <number> (291) 3 4 7 8 16 24 25 26 68 73 78
OPEN_CONTEXT_TAG <number> (292)
CLOSE_CONTEXT_TAG <number> (293)
QUOTE <number> (294) 63
ID <string> (295) 10 11 16 18 19 21 22 33 34 35 36 37 38 48 50 51 54
    62 79 80 82
PRINT <number> (296) 63 64
PLUSPLUS <number> (297) 34
MINUSMINUS <number> (298) 35


Nonterminals, with rules where they appear

$accept (45)
    on left: 0
begin (46)
    on left: 2, on right: 0
$@1 (47)
    on left: 1, on right: 2
root <number> (48)
    on left: 3 4 6 7 8 9, on right: 2 3 4 6 7 8
$@2 (49)
    on left: 5, on right: 6
declaration <number> (50)
    on left: 10 11, on right: 3 29
function <number> (51)
    on left: 16, on right: 6
$@3 (52)
    on left: 12, on right: 16
$@4 (53)
    on left: 13, on right: 16
$@5 (54)
    on left: 14, on right: 16
$@6 (55)
    on left: 15, on right: 16
params <number> (56)
    on left: 18 19 21 22 23, on right: 16 18 19 21 22
$@7 (57)
    on left: 17, on right: 18
$@8 (58)
    on left: 20, on right: 21
codeSet <number> (59)
    on left: 24 25 26 27, on right: 16 24 25 26 68 73 78
instruction <number> (60)
    on left: 28 29 30 31 32, on right: 24
assignation <number> (61)
    on left: 33 34 35 36 37 38, on right: 4 28
functionCallParams <number> (62)
    on left: 39 40 41, on right: 40 48 62
aritmeticOperation (63)
    on left: 42 43 44 45 46 48 49 50 51, on right: 36 38 39 40 42 43
    44 45 46 60 64
$@9 (64)
    on left: 47, on right: 48
return <number> (65)
    on left: 54 57 60 62, on right: 30
$@10 (66)
    on left: 52, on right: 54
$@11 (67)
    on left: 53, on right: 54
$@12 (68)
    on left: 55, on right: 57
$@13 (69)
    on left: 56, on right: 57
$@14 (70)
    on left: 58, on right: 60
$@15 (71)
    on left: 59, on right: 60
$@16 (72)
    on left: 61, on right: 62
print <number> (73)
    on left: 63 64, on right: 8 31
else (74)
    on left: 68 69, on right: 73
$@17 (75)
    on left: 65, on right: 68
$@18 (76)
    on left: 66, on right: 68
$@19 (77)
    on left: 67, on right: 68
controlStructure <number> (78)
    on left: 73 78, on right: 25
$@20 (79)
    on left: 70, on right: 73
$@21 (80)
    on left: 71, on right: 73
$@22 (81)
    on left: 72, on right: 73
$@23 (82)
    on left: 74, on right: 78
$@24 (83)
    on left: 75, on right: 78
$@25 (84)
    on left: 76, on right: 78
$@26 (85)
    on left: 77, on right: 78
logicalOperation <number> (86)
    on left: 79 80 81 82, on right: 73 78
logicalOperator <number> (87)
    on left: 83 84 85 86 87 88, on right: 79 80 81 82


State 0

    0 $accept: . begin $end

    $default  reduce using rule 1 ($@1)

    begin  go to state 1
    $@1    go to state 2


State 1

    0 $accept: begin . $end

    $end  shift, and go to state 3


State 2

    2 begin: $@1 . root

    INT_TYPE            shift, and go to state 4
    END_OF_INSTRUCTION  shift, and go to state 5
    ID                  shift, and go to state 6
    PRINT               shift, and go to state 7

    $end      reduce using rule 9 (root)
    $default  reduce using rule 5 ($@2)

    root         go to state 8
    $@2          go to state 9
    declaration  go to state 10
    assignation  go to state 11
    print        go to state 12


State 3

    0 $accept: begin $end .

    $default  accept


State 4

   10 declaration: INT_TYPE . ID
   11            | INT_TYPE . ID SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE

    ID  shift, and go to state 13


State 5

    7 root: END_OF_INSTRUCTION . root

    INT_TYPE            shift, and go to state 4
    END_OF_INSTRUCTION  shift, and go to state 5
    ID                  shift, and go to state 6
    PRINT               shift, and go to state 7

    $end      reduce using rule 9 (root)
    $default  reduce using rule 5 ($@2)

    root         go to state 14
    $@2          go to state 9
    declaration  go to state 10
    assignation  go to state 11
    print        go to state 12


State 6

   33 assignation: ID . ASSIGN INT_VAL
   34            | ID . PLUSPLUS
   35            | ID . MINUSMINUS
   36            | ID . ASSIGN aritmeticOperation
   37            | ID . SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE ASSIGN INT_VAL
   38            | ID . SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE ASSIGN aritmeticOperation

    ASSIGN               shift, and go to state 15
    SQUARE_BRACKET_OPEN  shift, and go to state 16
    PLUSPLUS             shift, and go to state 17
    MINUSMINUS           shift, and go to state 18


State 7

   63 print: PRINT . PARENTESIS_OPEN QUOTE STRING_VAL QUOTE PARENTESIS_CLOSE
   64      | PRINT . PARENTESIS_OPEN aritmeticOperation PARENTESIS_CLOSE

    PARENTESIS_OPEN  shift, and go to state 19


State 8

    2 begin: $@1 root .

    $default  reduce using rule 2 (begin)


State 9

    6 root: $@2 . function root

    FUN  shift, and go to state 20

    function  go to state 21


State 10

    3 root: declaration . END_OF_INSTRUCTION root

    END_OF_INSTRUCTION  shift, and go to state 22


State 11

    4 root: assignation . END_OF_INSTRUCTION root

    END_OF_INSTRUCTION  shift, and go to state 23


State 12

    8 root: print . END_OF_INSTRUCTION root

    END_OF_INSTRUCTION  shift, and go to state 24


State 13

   10 declaration: INT_TYPE ID .
   11            | INT_TYPE ID . SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE

    SQUARE_BRACKET_OPEN  shift, and go to state 25

    $default  reduce using rule 10 (declaration)


State 14

    7 root: END_OF_INSTRUCTION root .

    $default  reduce using rule 7 (root)


State 15

   33 assignation: ID ASSIGN . INT_VAL
   36            | ID ASSIGN . aritmeticOperation

    INT_VAL          shift, and go to state 26
    PARENTESIS_OPEN  shift, and go to state 27
    ID               shift, and go to state 28

    aritmeticOperation  go to state 29


State 16

   37 assignation: ID SQUARE_BRACKET_OPEN . INT_VAL SQUARE_BRACKET_CLOSE ASSIGN INT_VAL
   38            | ID SQUARE_BRACKET_OPEN . INT_VAL SQUARE_BRACKET_CLOSE ASSIGN aritmeticOperation

    INT_VAL  shift, and go to state 30


State 17

   34 assignation: ID PLUSPLUS .

    $default  reduce using rule 34 (assignation)


State 18

   35 assignation: ID MINUSMINUS .

    $default  reduce using rule 35 (assignation)


State 19

   63 print: PRINT PARENTESIS_OPEN . QUOTE STRING_VAL QUOTE PARENTESIS_CLOSE
   64      | PRINT PARENTESIS_OPEN . aritmeticOperation PARENTESIS_CLOSE

    INT_VAL          shift, and go to state 31
    PARENTESIS_OPEN  shift, and go to state 27
    QUOTE            shift, and go to state 32
    ID               shift, and go to state 28

    aritmeticOperation  go to state 33


State 20

   16 function: FUN . ID $@3 PARENTESIS_OPEN $@4 params $@5 PARENTESIS_CLOSE $@6 CURLY_BRACKET_OPEN END_OF_INSTRUCTION codeSet CURLY_BRACKET_CLOSE END_OF_INSTRUCTION

    ID  shift, and go to state 34


State 21

    6 root: $@2 function . root

    INT_TYPE            shift, and go to state 4
    END_OF_INSTRUCTION  shift, and go to state 5
    ID                  shift, and go to state 6
    PRINT               shift, and go to state 7

    $end      reduce using rule 9 (root)
    $default  reduce using rule 5 ($@2)

    root         go to state 35
    $@2          go to state 9
    declaration  go to state 10
    assignation  go to state 11
    print        go to state 12


State 22

    3 root: declaration END_OF_INSTRUCTION . root

    INT_TYPE            shift, and go to state 4
    END_OF_INSTRUCTION  shift, and go to state 5
    ID                  shift, and go to state 6
    PRINT               shift, and go to state 7

    $end      reduce using rule 9 (root)
    $default  reduce using rule 5 ($@2)

    root         go to state 36
    $@2          go to state 9
    declaration  go to state 10
    assignation  go to state 11
    print        go to state 12


State 23

    4 root: assignation END_OF_INSTRUCTION . root

    INT_TYPE            shift, and go to state 4
    END_OF_INSTRUCTION  shift, and go to state 5
    ID                  shift, and go to state 6
    PRINT               shift, and go to state 7

    $end      reduce using rule 9 (root)
    $default  reduce using rule 5 ($@2)

    root         go to state 37
    $@2          go to state 9
    declaration  go to state 10
    assignation  go to state 11
    print        go to state 12


State 24

    8 root: print END_OF_INSTRUCTION . root

    INT_TYPE            shift, and go to state 4
    END_OF_INSTRUCTION  shift, and go to state 5
    ID                  shift, and go to state 6
    PRINT               shift, and go to state 7

    $end      reduce using rule 9 (root)
    $default  reduce using rule 5 ($@2)

    root         go to state 38
    $@2          go to state 9
    declaration  go to state 10
    assignation  go to state 11
    print        go to state 12


State 25

   11 declaration: INT_TYPE ID SQUARE_BRACKET_OPEN . INT_VAL SQUARE_BRACKET_CLOSE

    INT_VAL  shift, and go to state 39


State 26

   33 assignation: ID ASSIGN INT_VAL .
   49 aritmeticOperation: INT_VAL .

    END_OF_INSTRUCTION  reduce using rule 33 (assignation)
    END_OF_INSTRUCTION  [reduce using rule 49 (aritmeticOperation)]
    $default            reduce using rule 49 (aritmeticOperation)


State 27

   46 aritmeticOperation: PARENTESIS_OPEN . aritmeticOperation PARENTESIS_CLOSE

    INT_VAL          shift, and go to state 31
    PARENTESIS_OPEN  shift, and go to state 27
    ID               shift, and go to state 28

    aritmeticOperation  go to state 40


State 28

   48 aritmeticOperation: ID . PARENTESIS_OPEN $@9 functionCallParams PARENTESIS_CLOSE
   50                   | ID .
   51                   | ID . SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE

    SQUARE_BRACKET_OPEN  shift, and go to state 41
    PARENTESIS_OPEN      shift, and go to state 42

    $default  reduce using rule 50 (aritmeticOperation)


State 29

   36 assignation: ID ASSIGN aritmeticOperation .
   42 aritmeticOperation: aritmeticOperation . SUM aritmeticOperation
   43                   | aritmeticOperation . SUBSTRACT aritmeticOperation
   44                   | aritmeticOperation . PRODUCT aritmeticOperation
   45                   | aritmeticOperation . DIVIDE aritmeticOperation

    SUM        shift, and go to state 43
    SUBSTRACT  shift, and go to state 44
    PRODUCT    shift, and go to state 45
    DIVIDE     shift, and go to state 46

    $default  reduce using rule 36 (assignation)


State 30

   37 assignation: ID SQUARE_BRACKET_OPEN INT_VAL . SQUARE_BRACKET_CLOSE ASSIGN INT_VAL
   38            | ID SQUARE_BRACKET_OPEN INT_VAL . SQUARE_BRACKET_CLOSE ASSIGN aritmeticOperation

    SQUARE_BRACKET_CLOSE  shift, and go to state 47


State 31

   49 aritmeticOperation: INT_VAL .

    $default  reduce using rule 49 (aritmeticOperation)


State 32

   63 print: PRINT PARENTESIS_OPEN QUOTE . STRING_VAL QUOTE PARENTESIS_CLOSE

    STRING_VAL  shift, and go to state 48


State 33

   42 aritmeticOperation: aritmeticOperation . SUM aritmeticOperation
   43                   | aritmeticOperation . SUBSTRACT aritmeticOperation
   44                   | aritmeticOperation . PRODUCT aritmeticOperation
   45                   | aritmeticOperation . DIVIDE aritmeticOperation
   64 print: PRINT PARENTESIS_OPEN aritmeticOperation . PARENTESIS_CLOSE

    SUM               shift, and go to state 43
    SUBSTRACT         shift, and go to state 44
    PRODUCT           shift, and go to state 45
    DIVIDE            shift, and go to state 46
    PARENTESIS_CLOSE  shift, and go to state 49


State 34

   16 function: FUN ID . $@3 PARENTESIS_OPEN $@4 params $@5 PARENTESIS_CLOSE $@6 CURLY_BRACKET_OPEN END_OF_INSTRUCTION codeSet CURLY_BRACKET_CLOSE END_OF_INSTRUCTION

    $default  reduce using rule 12 ($@3)

    $@3  go to state 50


State 35

    6 root: $@2 function root .

    $default  reduce using rule 6 (root)


State 36

    3 root: declaration END_OF_INSTRUCTION root .

    $default  reduce using rule 3 (root)


State 37

    4 root: assignation END_OF_INSTRUCTION root .

    $default  reduce using rule 4 (root)


State 38

    8 root: print END_OF_INSTRUCTION root .

    $default  reduce using rule 8 (root)


State 39

   11 declaration: INT_TYPE ID SQUARE_BRACKET_OPEN INT_VAL . SQUARE_BRACKET_CLOSE

    SQUARE_BRACKET_CLOSE  shift, and go to state 51


State 40

   42 aritmeticOperation: aritmeticOperation . SUM aritmeticOperation
   43                   | aritmeticOperation . SUBSTRACT aritmeticOperation
   44                   | aritmeticOperation . PRODUCT aritmeticOperation
   45                   | aritmeticOperation . DIVIDE aritmeticOperation
   46                   | PARENTESIS_OPEN aritmeticOperation . PARENTESIS_CLOSE

    SUM               shift, and go to state 43
    SUBSTRACT         shift, and go to state 44
    PRODUCT           shift, and go to state 45
    DIVIDE            shift, and go to state 46
    PARENTESIS_CLOSE  shift, and go to state 52


State 41

   51 aritmeticOperation: ID SQUARE_BRACKET_OPEN . INT_VAL SQUARE_BRACKET_CLOSE

    INT_VAL  shift, and go to state 53


State 42

   48 aritmeticOperation: ID PARENTESIS_OPEN . $@9 functionCallParams PARENTESIS_CLOSE

    $default  reduce using rule 47 ($@9)

    $@9  go to state 54


State 43

   42 aritmeticOperation: aritmeticOperation SUM . aritmeticOperation

    INT_VAL          shift, and go to state 31
    PARENTESIS_OPEN  shift, and go to state 27
    ID               shift, and go to state 28

    aritmeticOperation  go to state 55


State 44

   43 aritmeticOperation: aritmeticOperation SUBSTRACT . aritmeticOperation

    INT_VAL          shift, and go to state 31
    PARENTESIS_OPEN  shift, and go to state 27
    ID               shift, and go to state 28

    aritmeticOperation  go to state 56


State 45

   44 aritmeticOperation: aritmeticOperation PRODUCT . aritmeticOperation

    INT_VAL          shift, and go to state 31
    PARENTESIS_OPEN  shift, and go to state 27
    ID               shift, and go to state 28

    aritmeticOperation  go to state 57


State 46

   45 aritmeticOperation: aritmeticOperation DIVIDE . aritmeticOperation

    INT_VAL          shift, and go to state 31
    PARENTESIS_OPEN  shift, and go to state 27
    ID               shift, and go to state 28

    aritmeticOperation  go to state 58


State 47

   37 assignation: ID SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE . ASSIGN INT_VAL
   38            | ID SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE . ASSIGN aritmeticOperation

    ASSIGN  shift, and go to state 59


State 48

   63 print: PRINT PARENTESIS_OPEN QUOTE STRING_VAL . QUOTE PARENTESIS_CLOSE

    QUOTE  shift, and go to state 60


State 49

   64 print: PRINT PARENTESIS_OPEN aritmeticOperation PARENTESIS_CLOSE .

    $default  reduce using rule 64 (print)


State 50

   16 function: FUN ID $@3 . PARENTESIS_OPEN $@4 params $@5 PARENTESIS_CLOSE $@6 CURLY_BRACKET_OPEN END_OF_INSTRUCTION codeSet CURLY_BRACKET_CLOSE END_OF_INSTRUCTION

    PARENTESIS_OPEN  shift, and go to state 61


State 51

   11 declaration: INT_TYPE ID SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE .

    $default  reduce using rule 11 (declaration)


State 52

   46 aritmeticOperation: PARENTESIS_OPEN aritmeticOperation PARENTESIS_CLOSE .

    $default  reduce using rule 46 (aritmeticOperation)


State 53

   51 aritmeticOperation: ID SQUARE_BRACKET_OPEN INT_VAL . SQUARE_BRACKET_CLOSE

    SQUARE_BRACKET_CLOSE  shift, and go to state 62


State 54

   48 aritmeticOperation: ID PARENTESIS_OPEN $@9 . functionCallParams PARENTESIS_CLOSE

    INT_VAL          shift, and go to state 31
    PARENTESIS_OPEN  shift, and go to state 27
    ID               shift, and go to state 28

    $default  reduce using rule 41 (functionCallParams)

    functionCallParams  go to state 63
    aritmeticOperation  go to state 64


State 55

   42 aritmeticOperation: aritmeticOperation . SUM aritmeticOperation
   42                   | aritmeticOperation SUM aritmeticOperation .
   43                   | aritmeticOperation . SUBSTRACT aritmeticOperation
   44                   | aritmeticOperation . PRODUCT aritmeticOperation
   45                   | aritmeticOperation . DIVIDE aritmeticOperation

    PRODUCT  shift, and go to state 45
    DIVIDE   shift, and go to state 46

    $default  reduce using rule 42 (aritmeticOperation)


State 56

   42 aritmeticOperation: aritmeticOperation . SUM aritmeticOperation
   43                   | aritmeticOperation . SUBSTRACT aritmeticOperation
   43                   | aritmeticOperation SUBSTRACT aritmeticOperation .
   44                   | aritmeticOperation . PRODUCT aritmeticOperation
   45                   | aritmeticOperation . DIVIDE aritmeticOperation

    PRODUCT  shift, and go to state 45
    DIVIDE   shift, and go to state 46

    $default  reduce using rule 43 (aritmeticOperation)


State 57

   42 aritmeticOperation: aritmeticOperation . SUM aritmeticOperation
   43                   | aritmeticOperation . SUBSTRACT aritmeticOperation
   44                   | aritmeticOperation . PRODUCT aritmeticOperation
   44                   | aritmeticOperation PRODUCT aritmeticOperation .
   45                   | aritmeticOperation . DIVIDE aritmeticOperation

    $default  reduce using rule 44 (aritmeticOperation)


State 58

   42 aritmeticOperation: aritmeticOperation . SUM aritmeticOperation
   43                   | aritmeticOperation . SUBSTRACT aritmeticOperation
   44                   | aritmeticOperation . PRODUCT aritmeticOperation
   45                   | aritmeticOperation . DIVIDE aritmeticOperation
   45                   | aritmeticOperation DIVIDE aritmeticOperation .

    $default  reduce using rule 45 (aritmeticOperation)


State 59

   37 assignation: ID SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE ASSIGN . INT_VAL
   38            | ID SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE ASSIGN . aritmeticOperation

    INT_VAL          shift, and go to state 65
    PARENTESIS_OPEN  shift, and go to state 27
    ID               shift, and go to state 28

    aritmeticOperation  go to state 66


State 60

   63 print: PRINT PARENTESIS_OPEN QUOTE STRING_VAL QUOTE . PARENTESIS_CLOSE

    PARENTESIS_CLOSE  shift, and go to state 67


State 61

   16 function: FUN ID $@3 PARENTESIS_OPEN . $@4 params $@5 PARENTESIS_CLOSE $@6 CURLY_BRACKET_OPEN END_OF_INSTRUCTION codeSet CURLY_BRACKET_CLOSE END_OF_INSTRUCTION

    $default  reduce using rule 13 ($@4)

    $@4  go to state 68


State 62

   51 aritmeticOperation: ID SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE .

    $default  reduce using rule 51 (aritmeticOperation)


State 63

   48 aritmeticOperation: ID PARENTESIS_OPEN $@9 functionCallParams . PARENTESIS_CLOSE

    PARENTESIS_CLOSE  shift, and go to state 69


State 64

   39 functionCallParams: aritmeticOperation .
   40                   | aritmeticOperation . COMMA functionCallParams
   42 aritmeticOperation: aritmeticOperation . SUM aritmeticOperation
   43                   | aritmeticOperation . SUBSTRACT aritmeticOperation
   44                   | aritmeticOperation . PRODUCT aritmeticOperation
   45                   | aritmeticOperation . DIVIDE aritmeticOperation

    SUM        shift, and go to state 43
    SUBSTRACT  shift, and go to state 44
    PRODUCT    shift, and go to state 45
    DIVIDE     shift, and go to state 46
    COMMA      shift, and go to state 70

    $default  reduce using rule 39 (functionCallParams)


State 65

   37 assignation: ID SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE ASSIGN INT_VAL .
   49 aritmeticOperation: INT_VAL .

    END_OF_INSTRUCTION  reduce using rule 37 (assignation)
    END_OF_INSTRUCTION  [reduce using rule 49 (aritmeticOperation)]
    $default            reduce using rule 49 (aritmeticOperation)


State 66

   38 assignation: ID SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE ASSIGN aritmeticOperation .
   42 aritmeticOperation: aritmeticOperation . SUM aritmeticOperation
   43                   | aritmeticOperation . SUBSTRACT aritmeticOperation
   44                   | aritmeticOperation . PRODUCT aritmeticOperation
   45                   | aritmeticOperation . DIVIDE aritmeticOperation

    SUM        shift, and go to state 43
    SUBSTRACT  shift, and go to state 44
    PRODUCT    shift, and go to state 45
    DIVIDE     shift, and go to state 46

    $default  reduce using rule 38 (assignation)


State 67

   63 print: PRINT PARENTESIS_OPEN QUOTE STRING_VAL QUOTE PARENTESIS_CLOSE .

    $default  reduce using rule 63 (print)


State 68

   16 function: FUN ID $@3 PARENTESIS_OPEN $@4 . params $@5 PARENTESIS_CLOSE $@6 CURLY_BRACKET_OPEN END_OF_INSTRUCTION codeSet CURLY_BRACKET_CLOSE END_OF_INSTRUCTION

    INT_TYPE  shift, and go to state 71
    COMMA     shift, and go to state 72

    $default  reduce using rule 23 (params)

    params  go to state 73


State 69

   48 aritmeticOperation: ID PARENTESIS_OPEN $@9 functionCallParams PARENTESIS_CLOSE .

    $default  reduce using rule 48 (aritmeticOperation)


State 70

   40 functionCallParams: aritmeticOperation COMMA . functionCallParams

    INT_VAL          shift, and go to state 31
    PARENTESIS_OPEN  shift, and go to state 27
    ID               shift, and go to state 28

    $default  reduce using rule 41 (functionCallParams)

    functionCallParams  go to state 74
    aritmeticOperation  go to state 64


State 71

   18 params: INT_TYPE . ID $@7 params
   21       | INT_TYPE . ID SQUARE_BRACKET_OPEN SQUARE_BRACKET_CLOSE $@8 params

    ID  shift, and go to state 75


State 72

   19 params: COMMA . INT_TYPE ID params
   22       | COMMA . INT_TYPE ID SQUARE_BRACKET_OPEN SQUARE_BRACKET_CLOSE params

    INT_TYPE  shift, and go to state 76


State 73

   16 function: FUN ID $@3 PARENTESIS_OPEN $@4 params . $@5 PARENTESIS_CLOSE $@6 CURLY_BRACKET_OPEN END_OF_INSTRUCTION codeSet CURLY_BRACKET_CLOSE END_OF_INSTRUCTION

    $default  reduce using rule 14 ($@5)

    $@5  go to state 77


State 74

   40 functionCallParams: aritmeticOperation COMMA functionCallParams .

    $default  reduce using rule 40 (functionCallParams)


State 75

   18 params: INT_TYPE ID . $@7 params
   21       | INT_TYPE ID . SQUARE_BRACKET_OPEN SQUARE_BRACKET_CLOSE $@8 params

    SQUARE_BRACKET_OPEN  shift, and go to state 78

    $default  reduce using rule 17 ($@7)

    $@7  go to state 79


State 76

   19 params: COMMA INT_TYPE . ID params
   22       | COMMA INT_TYPE . ID SQUARE_BRACKET_OPEN SQUARE_BRACKET_CLOSE params

    ID  shift, and go to state 80


State 77

   16 function: FUN ID $@3 PARENTESIS_OPEN $@4 params $@5 . PARENTESIS_CLOSE $@6 CURLY_BRACKET_OPEN END_OF_INSTRUCTION codeSet CURLY_BRACKET_CLOSE END_OF_INSTRUCTION

    PARENTESIS_CLOSE  shift, and go to state 81


State 78

   21 params: INT_TYPE ID SQUARE_BRACKET_OPEN . SQUARE_BRACKET_CLOSE $@8 params

    SQUARE_BRACKET_CLOSE  shift, and go to state 82


State 79

   18 params: INT_TYPE ID $@7 . params

    INT_TYPE  shift, and go to state 71
    COMMA     shift, and go to state 72

    $default  reduce using rule 23 (params)

    params  go to state 83


State 80

   19 params: COMMA INT_TYPE ID . params
   22       | COMMA INT_TYPE ID . SQUARE_BRACKET_OPEN SQUARE_BRACKET_CLOSE params

    INT_TYPE             shift, and go to state 71
    SQUARE_BRACKET_OPEN  shift, and go to state 84
    COMMA                shift, and go to state 72

    $default  reduce using rule 23 (params)

    params  go to state 85


State 81

   16 function: FUN ID $@3 PARENTESIS_OPEN $@4 params $@5 PARENTESIS_CLOSE . $@6 CURLY_BRACKET_OPEN END_OF_INSTRUCTION codeSet CURLY_BRACKET_CLOSE END_OF_INSTRUCTION

    $default  reduce using rule 15 ($@6)

    $@6  go to state 86


State 82

   21 params: INT_TYPE ID SQUARE_BRACKET_OPEN SQUARE_BRACKET_CLOSE . $@8 params

    $default  reduce using rule 20 ($@8)

    $@8  go to state 87


State 83

   18 params: INT_TYPE ID $@7 params .

    $default  reduce using rule 18 (params)


State 84

   22 params: COMMA INT_TYPE ID SQUARE_BRACKET_OPEN . SQUARE_BRACKET_CLOSE params

    SQUARE_BRACKET_CLOSE  shift, and go to state 88


State 85

   19 params: COMMA INT_TYPE ID params .

    $default  reduce using rule 19 (params)


State 86

   16 function: FUN ID $@3 PARENTESIS_OPEN $@4 params $@5 PARENTESIS_CLOSE $@6 . CURLY_BRACKET_OPEN END_OF_INSTRUCTION codeSet CURLY_BRACKET_CLOSE END_OF_INSTRUCTION

    CURLY_BRACKET_OPEN  shift, and go to state 89


State 87

   21 params: INT_TYPE ID SQUARE_BRACKET_OPEN SQUARE_BRACKET_CLOSE $@8 . params

    INT_TYPE  shift, and go to state 71
    COMMA     shift, and go to state 72

    $default  reduce using rule 23 (params)

    params  go to state 90


State 88

   22 params: COMMA INT_TYPE ID SQUARE_BRACKET_OPEN SQUARE_BRACKET_CLOSE . params

    INT_TYPE  shift, and go to state 71
    COMMA     shift, and go to state 72

    $default  reduce using rule 23 (params)

    params  go to state 91


State 89

   16 function: FUN ID $@3 PARENTESIS_OPEN $@4 params $@5 PARENTESIS_CLOSE $@6 CURLY_BRACKET_OPEN . END_OF_INSTRUCTION codeSet CURLY_BRACKET_CLOSE END_OF_INSTRUCTION

    END_OF_INSTRUCTION  shift, and go to state 92


State 90

   21 params: INT_TYPE ID SQUARE_BRACKET_OPEN SQUARE_BRACKET_CLOSE $@8 params .

    $default  reduce using rule 21 (params)


State 91

   22 params: COMMA INT_TYPE ID SQUARE_BRACKET_OPEN SQUARE_BRACKET_CLOSE params .

    $default  reduce using rule 22 (params)


State 92

   16 function: FUN ID $@3 PARENTESIS_OPEN $@4 params $@5 PARENTESIS_CLOSE $@6 CURLY_BRACKET_OPEN END_OF_INSTRUCTION . codeSet CURLY_BRACKET_CLOSE END_OF_INSTRUCTION

    BREAK               shift, and go to state 93
    RETURN              shift, and go to state 94
    INT_TYPE            shift, and go to state 4
    IF_CLAUSE           shift, and go to state 95
    END_OF_INSTRUCTION  shift, and go to state 96
    ID                  shift, and go to state 6
    PRINT               shift, and go to state 7

    WHILE_CLAUSE  reduce using rule 74 ($@23)
    $default      reduce using rule 27 (codeSet)

    declaration       go to state 97
    codeSet           go to state 98
    instruction       go to state 99
    assignation       go to state 100
    return            go to state 101
    print             go to state 102
    controlStructure  go to state 103
    $@23              go to state 104


State 93

   32 instruction: BREAK .

    $default  reduce using rule 32 (instruction)


State 94

   54 return: RETURN . ID $@10 $@11
   57       | RETURN . INT_VAL $@12 $@13
   60       | RETURN . aritmeticOperation $@14 $@15
   62       | RETURN . ID PARENTESIS_OPEN $@16 functionCallParams PARENTESIS_CLOSE

    INT_VAL          shift, and go to state 105
    PARENTESIS_OPEN  shift, and go to state 27
    ID               shift, and go to state 106

    aritmeticOperation  go to state 107


State 95

   73 controlStructure: IF_CLAUSE . PARENTESIS_OPEN logicalOperation PARENTESIS_CLOSE $@20 CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@21 codeSet CURLY_BRACKET_CLOSE $@22 else

    PARENTESIS_OPEN  shift, and go to state 108


State 96

   26 codeSet: END_OF_INSTRUCTION . codeSet

    BREAK               shift, and go to state 93
    RETURN              shift, and go to state 94
    INT_TYPE            shift, and go to state 4
    IF_CLAUSE           shift, and go to state 95
    END_OF_INSTRUCTION  shift, and go to state 96
    ID                  shift, and go to state 6
    PRINT               shift, and go to state 7

    WHILE_CLAUSE  reduce using rule 74 ($@23)
    $default      reduce using rule 27 (codeSet)

    declaration       go to state 97
    codeSet           go to state 109
    instruction       go to state 99
    assignation       go to state 100
    return            go to state 101
    print             go to state 102
    controlStructure  go to state 103
    $@23              go to state 104


State 97

   29 instruction: declaration .

    $default  reduce using rule 29 (instruction)


State 98

   16 function: FUN ID $@3 PARENTESIS_OPEN $@4 params $@5 PARENTESIS_CLOSE $@6 CURLY_BRACKET_OPEN END_OF_INSTRUCTION codeSet . CURLY_BRACKET_CLOSE END_OF_INSTRUCTION

    CURLY_BRACKET_CLOSE  shift, and go to state 110


State 99

   24 codeSet: instruction . END_OF_INSTRUCTION codeSet

    END_OF_INSTRUCTION  shift, and go to state 111


State 100

   28 instruction: assignation .

    $default  reduce using rule 28 (instruction)


State 101

   30 instruction: return .

    $default  reduce using rule 30 (instruction)


State 102

   31 instruction: print .

    $default  reduce using rule 31 (instruction)


State 103

   25 codeSet: controlStructure . END_OF_INSTRUCTION codeSet

    END_OF_INSTRUCTION  shift, and go to state 112


State 104

   78 controlStructure: $@23 . WHILE_CLAUSE PARENTESIS_OPEN logicalOperation $@24 PARENTESIS_CLOSE CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@25 codeSet $@26 CURLY_BRACKET_CLOSE

    WHILE_CLAUSE  shift, and go to state 113


State 105

   49 aritmeticOperation: INT_VAL .
   57 return: RETURN INT_VAL . $@12 $@13

    END_OF_INSTRUCTION  reduce using rule 49 (aritmeticOperation)
    END_OF_INSTRUCTION  [reduce using rule 55 ($@12)]
    $default            reduce using rule 49 (aritmeticOperation)

    $@12  go to state 114


State 106

   48 aritmeticOperation: ID . PARENTESIS_OPEN $@9 functionCallParams PARENTESIS_CLOSE
   50                   | ID .
   51                   | ID . SQUARE_BRACKET_OPEN INT_VAL SQUARE_BRACKET_CLOSE
   54 return: RETURN ID . $@10 $@11
   62       | RETURN ID . PARENTESIS_OPEN $@16 functionCallParams PARENTESIS_CLOSE

    SQUARE_BRACKET_OPEN  shift, and go to state 41
    PARENTESIS_OPEN      shift, and go to state 115

    END_OF_INSTRUCTION  reduce using rule 50 (aritmeticOperation)
    END_OF_INSTRUCTION  [reduce using rule 52 ($@10)]
    $default            reduce using rule 50 (aritmeticOperation)

    $@10  go to state 116


State 107

   42 aritmeticOperation: aritmeticOperation . SUM aritmeticOperation
   43                   | aritmeticOperation . SUBSTRACT aritmeticOperation
   44                   | aritmeticOperation . PRODUCT aritmeticOperation
   45                   | aritmeticOperation . DIVIDE aritmeticOperation
   60 return: RETURN aritmeticOperation . $@14 $@15

    SUM        shift, and go to state 43
    SUBSTRACT  shift, and go to state 44
    PRODUCT    shift, and go to state 45
    DIVIDE     shift, and go to state 46

    $default  reduce using rule 58 ($@14)

    $@14  go to state 117


State 108

   73 controlStructure: IF_CLAUSE PARENTESIS_OPEN . logicalOperation PARENTESIS_CLOSE $@20 CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@21 codeSet CURLY_BRACKET_CLOSE $@22 else

    INT_VAL  shift, and go to state 118
    ID       shift, and go to state 119

    logicalOperation  go to state 120


State 109

   26 codeSet: END_OF_INSTRUCTION codeSet .

    $default  reduce using rule 26 (codeSet)


State 110

   16 function: FUN ID $@3 PARENTESIS_OPEN $@4 params $@5 PARENTESIS_CLOSE $@6 CURLY_BRACKET_OPEN END_OF_INSTRUCTION codeSet CURLY_BRACKET_CLOSE . END_OF_INSTRUCTION

    END_OF_INSTRUCTION  shift, and go to state 121


State 111

   24 codeSet: instruction END_OF_INSTRUCTION . codeSet

    BREAK               shift, and go to state 93
    RETURN              shift, and go to state 94
    INT_TYPE            shift, and go to state 4
    IF_CLAUSE           shift, and go to state 95
    END_OF_INSTRUCTION  shift, and go to state 96
    ID                  shift, and go to state 6
    PRINT               shift, and go to state 7

    WHILE_CLAUSE  reduce using rule 74 ($@23)
    $default      reduce using rule 27 (codeSet)

    declaration       go to state 97
    codeSet           go to state 122
    instruction       go to state 99
    assignation       go to state 100
    return            go to state 101
    print             go to state 102
    controlStructure  go to state 103
    $@23              go to state 104


State 112

   25 codeSet: controlStructure END_OF_INSTRUCTION . codeSet

    BREAK               shift, and go to state 93
    RETURN              shift, and go to state 94
    INT_TYPE            shift, and go to state 4
    IF_CLAUSE           shift, and go to state 95
    END_OF_INSTRUCTION  shift, and go to state 96
    ID                  shift, and go to state 6
    PRINT               shift, and go to state 7

    WHILE_CLAUSE  reduce using rule 74 ($@23)
    $default      reduce using rule 27 (codeSet)

    declaration       go to state 97
    codeSet           go to state 123
    instruction       go to state 99
    assignation       go to state 100
    return            go to state 101
    print             go to state 102
    controlStructure  go to state 103
    $@23              go to state 104


State 113

   78 controlStructure: $@23 WHILE_CLAUSE . PARENTESIS_OPEN logicalOperation $@24 PARENTESIS_CLOSE CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@25 codeSet $@26 CURLY_BRACKET_CLOSE

    PARENTESIS_OPEN  shift, and go to state 124


State 114

   57 return: RETURN INT_VAL $@12 . $@13

    $default  reduce using rule 56 ($@13)

    $@13  go to state 125


State 115

   48 aritmeticOperation: ID PARENTESIS_OPEN . $@9 functionCallParams PARENTESIS_CLOSE
   62 return: RETURN ID PARENTESIS_OPEN . $@16 functionCallParams PARENTESIS_CLOSE

    INT_VAL           reduce using rule 47 ($@9)
    INT_VAL           [reduce using rule 61 ($@16)]
    PARENTESIS_OPEN   reduce using rule 47 ($@9)
    PARENTESIS_OPEN   [reduce using rule 61 ($@16)]
    PARENTESIS_CLOSE  reduce using rule 47 ($@9)
    PARENTESIS_CLOSE  [reduce using rule 61 ($@16)]
    ID                reduce using rule 47 ($@9)
    ID                [reduce using rule 61 ($@16)]
    $default          reduce using rule 47 ($@9)

    $@9   go to state 54
    $@16  go to state 126


State 116

   54 return: RETURN ID $@10 . $@11

    $default  reduce using rule 53 ($@11)

    $@11  go to state 127


State 117

   60 return: RETURN aritmeticOperation $@14 . $@15

    $default  reduce using rule 59 ($@15)

    $@15  go to state 128


State 118

   81 logicalOperation: INT_VAL . logicalOperator INT_VAL
   82                 | INT_VAL . logicalOperator ID

    EQUALS          shift, and go to state 129
    NOT_EQUALS      shift, and go to state 130
    GREATER         shift, and go to state 131
    GREATER_EQUALS  shift, and go to state 132
    LESS            shift, and go to state 133
    LESS_EQUALS     shift, and go to state 134

    logicalOperator  go to state 135


State 119

   79 logicalOperation: ID . logicalOperator ID
   80                 | ID . logicalOperator INT_VAL

    EQUALS          shift, and go to state 129
    NOT_EQUALS      shift, and go to state 130
    GREATER         shift, and go to state 131
    GREATER_EQUALS  shift, and go to state 132
    LESS            shift, and go to state 133
    LESS_EQUALS     shift, and go to state 134

    logicalOperator  go to state 136


State 120

   73 controlStructure: IF_CLAUSE PARENTESIS_OPEN logicalOperation . PARENTESIS_CLOSE $@20 CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@21 codeSet CURLY_BRACKET_CLOSE $@22 else

    PARENTESIS_CLOSE  shift, and go to state 137


State 121

   16 function: FUN ID $@3 PARENTESIS_OPEN $@4 params $@5 PARENTESIS_CLOSE $@6 CURLY_BRACKET_OPEN END_OF_INSTRUCTION codeSet CURLY_BRACKET_CLOSE END_OF_INSTRUCTION .

    $default  reduce using rule 16 (function)


State 122

   24 codeSet: instruction END_OF_INSTRUCTION codeSet .

    $default  reduce using rule 24 (codeSet)


State 123

   25 codeSet: controlStructure END_OF_INSTRUCTION codeSet .

    $default  reduce using rule 25 (codeSet)


State 124

   78 controlStructure: $@23 WHILE_CLAUSE PARENTESIS_OPEN . logicalOperation $@24 PARENTESIS_CLOSE CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@25 codeSet $@26 CURLY_BRACKET_CLOSE

    INT_VAL  shift, and go to state 118
    ID       shift, and go to state 119

    logicalOperation  go to state 138


State 125

   57 return: RETURN INT_VAL $@12 $@13 .

    $default  reduce using rule 57 (return)


State 126

   62 return: RETURN ID PARENTESIS_OPEN $@16 . functionCallParams PARENTESIS_CLOSE

    INT_VAL          shift, and go to state 31
    PARENTESIS_OPEN  shift, and go to state 27
    ID               shift, and go to state 28

    $default  reduce using rule 41 (functionCallParams)

    functionCallParams  go to state 139
    aritmeticOperation  go to state 64


State 127

   54 return: RETURN ID $@10 $@11 .

    $default  reduce using rule 54 (return)


State 128

   60 return: RETURN aritmeticOperation $@14 $@15 .

    $default  reduce using rule 60 (return)


State 129

   83 logicalOperator: EQUALS .

    $default  reduce using rule 83 (logicalOperator)


State 130

   84 logicalOperator: NOT_EQUALS .

    $default  reduce using rule 84 (logicalOperator)


State 131

   87 logicalOperator: GREATER .

    $default  reduce using rule 87 (logicalOperator)


State 132

   88 logicalOperator: GREATER_EQUALS .

    $default  reduce using rule 88 (logicalOperator)


State 133

   85 logicalOperator: LESS .

    $default  reduce using rule 85 (logicalOperator)


State 134

   86 logicalOperator: LESS_EQUALS .

    $default  reduce using rule 86 (logicalOperator)


State 135

   81 logicalOperation: INT_VAL logicalOperator . INT_VAL
   82                 | INT_VAL logicalOperator . ID

    INT_VAL  shift, and go to state 140
    ID       shift, and go to state 141


State 136

   79 logicalOperation: ID logicalOperator . ID
   80                 | ID logicalOperator . INT_VAL

    INT_VAL  shift, and go to state 142
    ID       shift, and go to state 143


State 137

   73 controlStructure: IF_CLAUSE PARENTESIS_OPEN logicalOperation PARENTESIS_CLOSE . $@20 CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@21 codeSet CURLY_BRACKET_CLOSE $@22 else

    $default  reduce using rule 70 ($@20)

    $@20  go to state 144


State 138

   78 controlStructure: $@23 WHILE_CLAUSE PARENTESIS_OPEN logicalOperation . $@24 PARENTESIS_CLOSE CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@25 codeSet $@26 CURLY_BRACKET_CLOSE

    $default  reduce using rule 75 ($@24)

    $@24  go to state 145


State 139

   62 return: RETURN ID PARENTESIS_OPEN $@16 functionCallParams . PARENTESIS_CLOSE

    PARENTESIS_CLOSE  shift, and go to state 146


State 140

   81 logicalOperation: INT_VAL logicalOperator INT_VAL .

    $default  reduce using rule 81 (logicalOperation)


State 141

   82 logicalOperation: INT_VAL logicalOperator ID .

    $default  reduce using rule 82 (logicalOperation)


State 142

   80 logicalOperation: ID logicalOperator INT_VAL .

    $default  reduce using rule 80 (logicalOperation)


State 143

   79 logicalOperation: ID logicalOperator ID .

    $default  reduce using rule 79 (logicalOperation)


State 144

   73 controlStructure: IF_CLAUSE PARENTESIS_OPEN logicalOperation PARENTESIS_CLOSE $@20 . CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@21 codeSet CURLY_BRACKET_CLOSE $@22 else

    CURLY_BRACKET_OPEN  shift, and go to state 147


State 145

   78 controlStructure: $@23 WHILE_CLAUSE PARENTESIS_OPEN logicalOperation $@24 . PARENTESIS_CLOSE CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@25 codeSet $@26 CURLY_BRACKET_CLOSE

    PARENTESIS_CLOSE  shift, and go to state 148


State 146

   62 return: RETURN ID PARENTESIS_OPEN $@16 functionCallParams PARENTESIS_CLOSE .

    $default  reduce using rule 62 (return)


State 147

   73 controlStructure: IF_CLAUSE PARENTESIS_OPEN logicalOperation PARENTESIS_CLOSE $@20 CURLY_BRACKET_OPEN . END_OF_INSTRUCTION $@21 codeSet CURLY_BRACKET_CLOSE $@22 else

    END_OF_INSTRUCTION  shift, and go to state 149


State 148

   78 controlStructure: $@23 WHILE_CLAUSE PARENTESIS_OPEN logicalOperation $@24 PARENTESIS_CLOSE . CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@25 codeSet $@26 CURLY_BRACKET_CLOSE

    CURLY_BRACKET_OPEN  shift, and go to state 150


State 149

   73 controlStructure: IF_CLAUSE PARENTESIS_OPEN logicalOperation PARENTESIS_CLOSE $@20 CURLY_BRACKET_OPEN END_OF_INSTRUCTION . $@21 codeSet CURLY_BRACKET_CLOSE $@22 else

    $default  reduce using rule 71 ($@21)

    $@21  go to state 151


State 150

   78 controlStructure: $@23 WHILE_CLAUSE PARENTESIS_OPEN logicalOperation $@24 PARENTESIS_CLOSE CURLY_BRACKET_OPEN . END_OF_INSTRUCTION $@25 codeSet $@26 CURLY_BRACKET_CLOSE

    END_OF_INSTRUCTION  shift, and go to state 152


State 151

   73 controlStructure: IF_CLAUSE PARENTESIS_OPEN logicalOperation PARENTESIS_CLOSE $@20 CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@21 . codeSet CURLY_BRACKET_CLOSE $@22 else

    BREAK               shift, and go to state 93
    RETURN              shift, and go to state 94
    INT_TYPE            shift, and go to state 4
    IF_CLAUSE           shift, and go to state 95
    END_OF_INSTRUCTION  shift, and go to state 96
    ID                  shift, and go to state 6
    PRINT               shift, and go to state 7

    WHILE_CLAUSE  reduce using rule 74 ($@23)
    $default      reduce using rule 27 (codeSet)

    declaration       go to state 97
    codeSet           go to state 153
    instruction       go to state 99
    assignation       go to state 100
    return            go to state 101
    print             go to state 102
    controlStructure  go to state 103
    $@23              go to state 104


State 152

   78 controlStructure: $@23 WHILE_CLAUSE PARENTESIS_OPEN logicalOperation $@24 PARENTESIS_CLOSE CURLY_BRACKET_OPEN END_OF_INSTRUCTION . $@25 codeSet $@26 CURLY_BRACKET_CLOSE

    $default  reduce using rule 76 ($@25)

    $@25  go to state 154


State 153

   73 controlStructure: IF_CLAUSE PARENTESIS_OPEN logicalOperation PARENTESIS_CLOSE $@20 CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@21 codeSet . CURLY_BRACKET_CLOSE $@22 else

    CURLY_BRACKET_CLOSE  shift, and go to state 155


State 154

   78 controlStructure: $@23 WHILE_CLAUSE PARENTESIS_OPEN logicalOperation $@24 PARENTESIS_CLOSE CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@25 . codeSet $@26 CURLY_BRACKET_CLOSE

    BREAK               shift, and go to state 93
    RETURN              shift, and go to state 94
    INT_TYPE            shift, and go to state 4
    IF_CLAUSE           shift, and go to state 95
    END_OF_INSTRUCTION  shift, and go to state 96
    ID                  shift, and go to state 6
    PRINT               shift, and go to state 7

    WHILE_CLAUSE  reduce using rule 74 ($@23)
    $default      reduce using rule 27 (codeSet)

    declaration       go to state 97
    codeSet           go to state 156
    instruction       go to state 99
    assignation       go to state 100
    return            go to state 101
    print             go to state 102
    controlStructure  go to state 103
    $@23              go to state 104


State 155

   73 controlStructure: IF_CLAUSE PARENTESIS_OPEN logicalOperation PARENTESIS_CLOSE $@20 CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@21 codeSet CURLY_BRACKET_CLOSE . $@22 else

    $default  reduce using rule 72 ($@22)

    $@22  go to state 157


State 156

   78 controlStructure: $@23 WHILE_CLAUSE PARENTESIS_OPEN logicalOperation $@24 PARENTESIS_CLOSE CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@25 codeSet . $@26 CURLY_BRACKET_CLOSE

    $default  reduce using rule 77 ($@26)

    $@26  go to state 158


State 157

   73 controlStructure: IF_CLAUSE PARENTESIS_OPEN logicalOperation PARENTESIS_CLOSE $@20 CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@21 codeSet CURLY_BRACKET_CLOSE $@22 . else

    END_OF_INSTRUCTION  reduce using rule 69 (else)
    $default            reduce using rule 65 ($@17)

    else  go to state 159
    $@17  go to state 160


State 158

   78 controlStructure: $@23 WHILE_CLAUSE PARENTESIS_OPEN logicalOperation $@24 PARENTESIS_CLOSE CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@25 codeSet $@26 . CURLY_BRACKET_CLOSE

    CURLY_BRACKET_CLOSE  shift, and go to state 161


State 159

   73 controlStructure: IF_CLAUSE PARENTESIS_OPEN logicalOperation PARENTESIS_CLOSE $@20 CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@21 codeSet CURLY_BRACKET_CLOSE $@22 else .

    $default  reduce using rule 73 (controlStructure)


State 160

   68 else: $@17 . ELSE_CLAUSE $@18 CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@19 codeSet CURLY_BRACKET_CLOSE

    ELSE_CLAUSE  shift, and go to state 162


State 161

   78 controlStructure: $@23 WHILE_CLAUSE PARENTESIS_OPEN logicalOperation $@24 PARENTESIS_CLOSE CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@25 codeSet $@26 CURLY_BRACKET_CLOSE .

    $default  reduce using rule 78 (controlStructure)


State 162

   68 else: $@17 ELSE_CLAUSE . $@18 CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@19 codeSet CURLY_BRACKET_CLOSE

    $default  reduce using rule 66 ($@18)

    $@18  go to state 163


State 163

   68 else: $@17 ELSE_CLAUSE $@18 . CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@19 codeSet CURLY_BRACKET_CLOSE

    CURLY_BRACKET_OPEN  shift, and go to state 164


State 164

   68 else: $@17 ELSE_CLAUSE $@18 CURLY_BRACKET_OPEN . END_OF_INSTRUCTION $@19 codeSet CURLY_BRACKET_CLOSE

    END_OF_INSTRUCTION  shift, and go to state 165


State 165

   68 else: $@17 ELSE_CLAUSE $@18 CURLY_BRACKET_OPEN END_OF_INSTRUCTION . $@19 codeSet CURLY_BRACKET_CLOSE

    $default  reduce using rule 67 ($@19)

    $@19  go to state 166


State 166

   68 else: $@17 ELSE_CLAUSE $@18 CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@19 . codeSet CURLY_BRACKET_CLOSE

    BREAK               shift, and go to state 93
    RETURN              shift, and go to state 94
    INT_TYPE            shift, and go to state 4
    IF_CLAUSE           shift, and go to state 95
    END_OF_INSTRUCTION  shift, and go to state 96
    ID                  shift, and go to state 6
    PRINT               shift, and go to state 7

    WHILE_CLAUSE  reduce using rule 74 ($@23)
    $default      reduce using rule 27 (codeSet)

    declaration       go to state 97
    codeSet           go to state 167
    instruction       go to state 99
    assignation       go to state 100
    return            go to state 101
    print             go to state 102
    controlStructure  go to state 103
    $@23              go to state 104


State 167

   68 else: $@17 ELSE_CLAUSE $@18 CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@19 codeSet . CURLY_BRACKET_CLOSE

    CURLY_BRACKET_CLOSE  shift, and go to state 168


State 168

   68 else: $@17 ELSE_CLAUSE $@18 CURLY_BRACKET_OPEN END_OF_INSTRUCTION $@19 codeSet CURLY_BRACKET_CLOSE .

    $default  reduce using rule 68 (else)
